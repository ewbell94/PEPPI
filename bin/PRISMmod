#!/usr/bin/env perl

use strict;
use warnings;
use List::Util qw(min);

my $peppidir="!PEPPIDIR!";
my $outdir="!OUTDIR!/PPI";
my $pairname="!PAIRNAME!";
my $benchflag=!BENCHMARK!;
my $user=`whoami`;
chomp($user);

my $randomTag=int(rand(1000000));
my $bindir="$peppidir/bin";
my $prismloc="/nfs/amino-home/ewbell/PRISM/PRISM.tar.gz";
my $homothresh=0.3;

my $tempdir="/tmp/$user/PRISM_$pairname\_$randomTag";
if (! -e "$tempdir"){
    print `mkdir -p $tempdir`;
} else {
    print `rm -rf $tempdir/*`;
}
my @chains=split(",",$pairname);
(my $realchainA=`cat $outdir/../protcodeA.csv`)=~s/.*,\"//; 
(my $realchainB=`cat $outdir/../protcodeB.csv`)=~s/.*,\"//;
$realchainA=~s/:.*//;
$realchainB=~s/:.*//; 
chomp($realchainA);
chomp($realchainB);
print "$realchainA,$realchainB\n";

print `date`;
print `cp $prismloc $tempdir/`;
chdir($tempdir);
print `tar -zxvf ./PRISM.tar.gz`;
chdir("$tempdir/PRISM_protocol/0-SurfaceExtraction");
print `echo "1ABC" > ./PDB.list`;
print `cat /nfs/amino-home/ewbell/SPRINGDB/monomers/$realchainA.pdb > ./PDB/1abc.pdb`;
print `cat /nfs/amino-home/ewbell/SPRINGDB/monomers/$realchainB.pdb >> ./PDB/1abc.pdb`;
print `echo "END" >> ./PDB/1abc.pdb`;
print `sed -i "/TER/d" ./PDB/1abc.pdb`;

my $currdir=`pwd`;
chomp($currdir);
print `python surfaceExtractor.py $currdir/PDB $currdir 1 1`;
if (!-f "all_pdbs.paths"){
    print "Surface extraction was not completed successfully.\n";
    exit(1);
}
print `cp all_pdbs.paths ../1-Prediction/PATHS`;
chdir("../1-Prediction");

$currdir=`pwd`;
chomp($currdir);
print `python structuralAlignment.py $currdir/TEMPLATE $currdir 1 40000`;
if (!-e "MULTIPROT_OUTPUT"){
    print "Multiprot alignment was not run.\n";
    exit(2);
}

for my $dir (glob("./MULTIPROT_OUTPUT/*")){
    (my $fastaname=$dir)=~s/.*\///;
    $fastaname=substr($fastaname,0,4)."_".substr($fastaname,4,1);
    if ($benchflag && getSeqID("./FASTA/$fastaname.fasta","../0-SurfaceExtraction/PDB/1abc.pdb") > $homothresh){
	print `rm -rf $dir`;
    }
}

chdir("../2-DistanceCalculation");
print `python TransformationFiltering.py 1 40000`;
chdir("../6-FiberDock");
print `python FlexibleRefinement.py 1 40000`;

print `mkdir $outdir/$pairname/PRISM`;
print `cp -r ENERGIES $outdir/$pairname/PRISM`;

open(my $resfile,">","$outdir/$pairname/PRISM/res.txt");
#print `cp $peppidir/lib/STRING/STRINGseqsv11.db* $tempdir/`;

print `sync`;
print `rm -rf $tempdir`;
print `date`;

sub getSeqID{
    my $fname1=$_[0];
    my $fname2=$_[1];
    return 0.0 if (! -f $fname1 || ! -f $fname2);
    my $NWresult;
    if ($fname2=~/\.fasta/){
        $NWresult=`$bindir/NWalign $fname1 $fname2`;
    } elsif ($fname2=~/\.pdb/){
        $NWresult=`$bindir/NWalign $fname1 $fname2 2`;
    } else {
        return 0.0;
    }
    $NWresult=~/Identical length:\s+(\d+)/;
    my $idcount=$1;
    $NWresult=~/Length of sequence 1:\s+(\d+).*\nLength of sequence 2:\s+(\d+)/;
    my $seq1len=$1;
    my $seq2len=$2;
    return min($idcount/$seq1len,$idcount/$seq2len) if ($fname2=~/\.fasta/);
    return $idcount/$seq2len if ($fname2=~/\.pdb/); #I changed this one because query is now the PDB
    return 0.0;
}
