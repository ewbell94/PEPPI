#!/usr/bin/perl

# program at /nfs/amino-home/zcx/Program/RaptorX/1.66
# library at /nfs/amino-library/local/RaptorX2/databases/TPL_BC100

############### RaptorX  ############################
##### report node -------->
#$ENV{'LD_LIBRARY_PATH'}="/share/apps/gcc-4.6/lib:/share/apps/gcc-4.6/lib64";

`hostname`=~/(\S+)/;
$node=$1;
printf "hostname: $node\n";
$time=`date`;
printf "starting time: $time";
$pwd=`pwd`;
printf "pwd: $pwd";
#^^^^^^^^^^^^^^^^^^^^^^^^^^

$home="/nfs/amino-home/zhng";
$lib="/nfs/amino-library";

%ts=(
     'GLY'=>'G',
     'ALA'=>'A',
     'VAL'=>'V',
     'LEU'=>'L',
     'ILE'=>'I',
     'SER'=>'S',
     'THR'=>'T',
     'CYS'=>'C',
     'MET'=>'M',
     'PRO'=>'P',
     'ASP'=>'D',
     'ASN'=>'N',
     'GLU'=>'E',
     'GLN'=>'Q',
     'LYS'=>'K',
     'ARG'=>'R',
     'HIS'=>'H',
     'PHE'=>'F',
     'TYR'=>'Y',
     'TRP'=>'W',
     'ASX'=>'B',
     'GLX'=>'Z',
     'UNK'=>'X',
     'G'=>'GLY',
     'A'=>'ALA',
     'V'=>'VAL',
     'L'=>'LEU',
     'I'=>'ILE',
     'S'=>'SER',
     'T'=>'THR',
     'C'=>'CYS',
     'M'=>'MET',
     'P'=>'PRO',
     'D'=>'ASP',
     'N'=>'ASN',
     'E'=>'GLU',
     'Q'=>'GLN',
     'K'=>'LYS',
     'R'=>'ARG',
     'H'=>'HIS',
     'F'=>'PHE',
     'Y'=>'TYR',
     'W'=>'TRP',
     'a'=>'CYS',
     'b'=>'CYS',
     'c'=>'CYS',
     'd'=>'CYS',
     'e'=>'CYS',
     'f'=>'CYS',
     'g'=>'CYS',
     'h'=>'CYS',
     'i'=>'CYS',
     'j'=>'CYS',
     'k'=>'CYS',
     'l'=>'CYS',
     'm'=>'CYS',
     'n'=>'CYS',
     'o'=>'CYS',
     'p'=>'CYS',
     'q'=>'CYS',
     'r'=>'CYS',
     's'=>'CYS',
     't'=>'CYS',
     'u'=>'CYS',
     'v'=>'CYS',
     'w'=>'CYS',
     'x'=>'CYS',
     'y'=>'CYS',
     'z'=>'CYS',
     'B'=>'ASX',
     'Z'=>'GLX',
     'X'=>'CYS',
    );

@AA=qw(
       C
       M
       F
       I
       L
       V
       W
       Y
       A
       G
       T
       S
       Q
       N
       E
       D
       H
       R
       K
       P
       );

################# directories #############################
$s="!S!";
$data_dir="!DATA_DIR!/$s";  #for seq.txt and init.dat
#$data_dir="!DATA_DIR!";
$tag="!TAG!";
$o="!O!";
$idcut0="!ID_CUT!"; 
$ntemp="!N_TEMP!";
$user="!USER!";

$raptor_path = "$lib/local/RaptorX3"; # simlink to /nfs/amino-home/zcx/Program/RaptorX/1.66
################ working directory ########################
$work_dir="/tmp/$user/RaptorX3/$tag";
`/bin/rm -fr $work_dir`;
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";

system("cp $home/bin/align .");
################ make fasta sequence file #################
@seqtxts=`cat $data_dir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;
open(seq,">$s.fasta");
printf seq ">protein $Lch\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check    
}
printf seq "\n";
close(seq);


########### install RaptorX program ---------->
printf "install RaptorX program .....\n";
`cp $raptor_path/buildFeature $work_dir/`;
`cp $raptor_path/CNFsearch $work_dir/`;
#`cp $raptor_path/CNFsearch_mpi $work_dir/`; # do not use parallel version
`cp $raptor_path/CNFalign_lite $work_dir/`;
`cp $raptor_path/setup.pl $work_dir/setup.pl`;
`cp -r $raptor_path/util/ $work_dir/`;
`ln -s $raptor_path/databases/ $work_dir/`; # simlink to /nfs/amino-library/local/RaptorX2/databases
#`cp -arp $raptor_path/databases/ $work_dir/`;
#`unlink $work_dir/databases/pdb_BC100`; # xyz coordinate will be extracted from tgl
`/usr/bin/perl setup.pl`;

############### build feature ------------->
printf "running RaptorX building feature program .....\n";
`./buildFeature -i $s.fasta -o $s.tgt -c 4`;

############## Run Raptor threading ---------->
printf "run Raptor threading ..........\n";
`./CNFsearch -a 4 -q $s -g $work_dir -l ./databases/bc100_list -d ./databases/TPL_BC100/ -o $s.rank -n 500`;

########### retrive alignment of init.dat --------->
printf "retrive alignment file .....\n";
open(rank,"$s.rank");
open(init,">init.dat");
$i_t=0;
while($line=<rank>){
    ############# read Z-score ----->
    if($line=~/No   Template    Pvalue      Score/){
	while($line=<rank>){
	    if($line=~/\d+\s+(\S+)\s+(\S+)/){
		$template=$1;
		$zscore{$template}=-log($2);
	    }
	    if($line=~/^No 1/){
		goto pos2a;
	    }
	}
    }
  pos2a:;
    ############# read alignment ----->
    if($line=~/^\>\s*(\S+)/){
	$template=$1;
	#printf "$template\n";
	$n_seq=0;
	while($line=<rank>){
	    if($line=~/^T\s+$template\s+(\d+)\s+(\S+)/){
		$n_seq++;
		$nT{$n_seq}=$1;
		$seqT{$n_seq}=$2;
		<rank>;
		$line=<rank>;
		if($line=~/^S\s+\S+\s+(\d+)\s+(\S+)/){
		    $nQ{$n_seq}=$1;
		    $seqQ{$n_seq}=$2;
		}
	    }
	    if($line=~/^No\s+\d+/){
		goto pos2b;
	    }
	}
      pos2b:;
	$L_ali=0;
	for($i=1;$i<=$n_seq;$i++){
	    $L=length $seqT{$i};
	    $kT=$nT{$i}-1;
	    $kQ=$nQ{$i}-1;
	    for($j=1;$j<=$L;$j++){
		$aT=substr($seqT{$i},$j-1,1);
		$aQ=substr($seqQ{$i},$j-1,1);
		$kT++ if($aT ne "-");
		$kQ++ if($aQ ne "-");
		if($aT ne "-" && $aQ ne "-"){
		    $L_ali++;
		    $resT{$L_ali}=$kT;
		    $resQ{$L_ali}=$kQ;
		    $ST{$L_ali}=$aT;  #AA of template
		    $SQ{$L_ali}=$aQ;
		}
	    }
	}
	
	######### original TPL file -------->
	$tmp="databases/TPL_BC100/$template.tpl";
	if(!-s "$tmp"){
	    print "without $tmp!\n";
	    goto pos2c;
	}
	open(a,"$tmp");
	$sequence="";
	$LT=0;
	while($line=<a>){
	    if($line=~/Num Res  Missing   SS    Core/){
		while($line=<a>){
		    if($line=~/(\S+)\s+(\S+)\s+(\d+)/){
			$LT++;
			$sT{$LT}=$2;
			$sequence.=$2;
			$miss=$3;
			if($miss == 0){
			    if($line=~/(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/){
				$x{$LT}=$10;
				$y{$LT}=$11;
				$z{$LT}=$12;
			    }else{
				print "$line";
				printf "warning: error in $tmp\n";
			    }
			}else{
			    $x{$LT}="X";
			    $y{$LT}="X";
			    $z{$LT}="X";
			}
		    }
		    if($line=~/\/\/\/\/\//){
			goto pos2d;
		    }
		}
	    }
	}
      pos2d:;
	close(a);
	
	############ check homology ##############
	if($idcut0<0.999){
	    $align_rst=`./align $sequence $s.fasta 4`;
	    if($align_rst=~/Identical length\:\s+(\d+)/){
		$id=$1/$Lch;
		goto pos2c if($id>=$idcut0);
	    }
	}
	
	########### check real L_ali ##############
	$L_ali_eff=0;
	for($j=1;$j<=$L_ali;$j++){
	    $k=$resT{$j}; #order number on T
	    if($x{$k} ne "X"){
		$L_ali_eff++;
	    }else{  #aligned on an empty residue
		printf "warning: $template error!\n";
	    }
	}
	if($L_ali_eff<$Lch/5){
	    printf "$s, L_ali=$L_ali, L_ali_eff=$L_ali_eff is too short\n";
	    goto pos2c;
	}
	
	########## output init.dat --------->
	$i_t++;
	printf init "%5d %8.3f %5d   %6s\n",
	$L_ali_eff,$zscore{$template},$i_t,$template;
	for($j=1;$j<=$L_ali;$j++){
	    $k=$resT{$j}; #order number on T
	    if($x{$k} ne "X"){
		printf init "ATOM  %5s  CA  %3s  %4d    %8.3f%8.3f%8.3f%5d %3s\n",
		$j,$ts{$SQ{$j}},$resQ{$j},
		$x{$k},$y{$k},$z{$k},
		$k,$ts{$sT{$k}};
	    }else{
		printf "warning: $template error!\n";
	    }
	    if($ST{$j} ne $sT{$k}){
		printf "warning: $i_t, $template, $j,$k,$ST{$j}!=$sT{$k} --- error on alignment transfer!\n";
	    }
	}
	printf init "TER\n";
	goto pos3 if($i_t >= $ntemp);
      pos2c:;
    }
}
 pos3:;
close(init);

open(init1,">init1.dat");
printf init1 "%5d %5d (N_temp, Lch)\n",$i_t,$Lch;
close(init1);
`cat init.dat >>init1.dat`;

`/bin/cp init1.dat            $data_dir/init$o\.RAP3`;

################# endding procedure ######################
`sync`;
`sync`;
sleep(20);
`rm -fr $work_dir`;

exit();

