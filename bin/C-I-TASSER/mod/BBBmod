#!/usr/bin/perl
use Math::Trig;

$home="/nfs/amino-home/zhng";
$lib="/nfs/amino-library";
$lib="/oasis/projects/nsf/mia181/zhanglab/library" if(!-d "$lib");
$home="$lib" if (!-d "$home");


$libdir="!LIB_DIR!";
$libdir="$lib"; #because of path, BBB has to be at local node
########### setup  the environment and Working DIRectory ###
#$ENV{PATH}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin:$libdir/bin/prospect/bin";
#$ENV{LD_LIBRARY_PATH}="/usr/local/lib:/usr/lib:/lib:.";

################ BBB ######################
# 1, blast seting is at BBBmod;
#    use '$lib/nr/nr'
# 2, if change the library, one need to modify the file of 
#    ~/bin/prospect/data/parameters/template_paths
#################################################

##### report node -------->
`hostname`=~/(\S+)/;
$node=$1;
printf "hostname: $node\n";
$time=`date`;
printf "starting time: $time";
$pwd=`pwd`;
printf "pwd: $pwd";
#^^^^^^^^^^^^^^^^^^^^^^^^^^

%ts=(
     'GLY'=>'G',
     'ALA'=>'A',
     'VAL'=>'V',
     'LEU'=>'L',
     'ILE'=>'I',
     'SER'=>'S',
     'THR'=>'T',
     'CYS'=>'C',
     'MET'=>'M',
     'PRO'=>'P',
     'ASP'=>'D',
     'ASN'=>'N',
     'GLU'=>'E',
     'GLN'=>'Q',
     'LYS'=>'K',
     'ARG'=>'R',
     'HIS'=>'H',
     'PHE'=>'F',
     'TYR'=>'Y',
     'TRP'=>'W',

     'ASX'=>'B',
     'GLX'=>'Z',
     'UNK'=>'X',

     'G'=>'GLY',
     'A'=>'ALA',
     'V'=>'VAL',
     'L'=>'LEU',
     'I'=>'ILE',
     'S'=>'SER',
     'T'=>'THR',
     'C'=>'CYS',
     'M'=>'MET',
     'P'=>'PRO',
     'D'=>'ASP',
     'N'=>'ASN',
     'E'=>'GLU',
     'Q'=>'GLN',
     'K'=>'LYS',
     'R'=>'ARG',
     'H'=>'HIS',
     'F'=>'PHE',
     'Y'=>'TYR',
     'W'=>'TRP',

     'a'=>'CYS',
     'b'=>'CYS',
     'c'=>'CYS',
     'd'=>'CYS',
     'e'=>'CYS',
     'f'=>'CYS',
     'g'=>'CYS',
     'h'=>'CYS',
     'i'=>'CYS',
     'j'=>'CYS',
     'k'=>'CYS',
     'l'=>'CYS',
     'm'=>'CYS',
     'n'=>'CYS',
     'o'=>'CYS',
     'p'=>'CYS',
     'q'=>'CYS',
     'r'=>'CYS',
     's'=>'CYS',
     't'=>'CYS',
     'u'=>'CYS',
     'v'=>'CYS',
     'w'=>'CYS',
     'x'=>'CYS',
     'y'=>'CYS',
     'z'=>'CYS',

     'B'=>'ASX',
     'Z'=>'GLX',
     'X'=>'CYS',
    );

############ for PROSPECT #######################
$ENV{PROSPECT_PATH}="$libdir/bin/prospect";
$ENV{BLASTPGP_EXE}="$libdir/blast/bin/blastpgp";
$ENV{MAKEMAT_EXE}="$libdir/blast/bin/makemat";
$ENV{BLASTPGP_DB}="$libdir/nr/nr";
$ENV{DSSP_EXE}="$libdir/bin/dssp";

################# directories #############################
$data_dir="!DATA_DIR!/!S!";  #for initial sequence
#$work_dir="/tmp/!USER!/!TAG!";
$work_dir="/scratch/$ENV{USER}/$ENV{SLURM_JOBID}";
$work_dir="/tmp/!USER!/!TAG!" if (!-d "$work_dir" || ! "$ENV{SLURM_JOBID}");

$prospect_dir="$libdir/bin/prospect/bin";
$blast_dir="$libdir/blast/bin";
$template_dir="$libdir/XML";
$seqbank="$ENV{BLASTPGP_DB}";

################ working directory ########################
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";
`/bin/rm -f $work_dir/*`;
`cp $libdir/bin/align ./align`;
`cp $prospect_dir/libz.so.1 .`;
`cp $prospect_dir/libxml2.so.2 .`;
#`cp $prospect_dir/libgcc_s.so.1 .`;
`cp $prospect_dir/libstdc++-libc6.2-2.so.3 .`;
$ENV{LD_LIBRARY_PATH}="$work_dir";
################ make fasta sequence file #################
@seqtxts=`cat $data_dir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;
open(seq,">protein.seq");
printf seq ">protein\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check
    if($i==int($i/60)*60){
	printf seq "\n";
    }
}
printf seq "\n";
close(seq);

########### prepare sequence profile ######################
printf "----- blast, doing:\n";
#system("$blast_dir/blastpgp -b 0 -j 3 -h 0.001 -d $seqbank -i protein.seq -C protein.chk");
`$home/bin/blast+.pl protein.seq`;
`cp psitmp.chk protein.chk`;
`$prospect_dir/read_chk.LINUX protein.chk > protein.freq`;
printf "----- blast done ----------\n";

########### prepare secondary structure prediction ########
### it turns out better using protein.chk than protein.seq 
### for 2th structure prediction:
printf "---- predict secondary structurem doing:\n";
#`$prospect_dir/prospect_ssp.LINUX -freqfile protein.freq -p > protein.ss`;
 pos50:;
if(!-s "$data_dir/seq.dat.ss"){
    sleep(60);
    goto pos50;
}
`/bin/cp $data_dir/seq.dat.ss seq.dat.ss`;
$pre{1}="              ";
$pre{2}="         AA  |";
$pre{3}="         PHD |";
$pre{4}="         Rel |";
$pre{5}=" detail:";
$pre{6}="         prH-|";
$pre{7}="         prE-|";
$pre{8}="         prL-|";
$pre{9}=" subset: SUB |";
open(seqss,"seq.dat.ss");
$i=0;
while($line=<seqss>){
    if($line=~/\d+\s+(\S)\s+(\S)\s+(\S+)\s+(\S+)\s+(\S+)/){
	$i++;
	$seq=$1;
	$sec="L";
	$sec="H" if($2 eq "H");
	$sec="E" if($2 eq "E");
	$prL=int($3*10+0.5);
	$prH=int($4*10+0.5);
	$prE=int($5*10+0.5);
	$prL=9 if($prL>9);
	$prH=9 if($prH>9);
	$prE=9 if($prE>9);
	undef %pp;
	$pp{1}=$3*10;
	$pp{2}=$4*10;
	$pp{3}=$5*10;
	@pp_keys=sort{$pp{$b}<=>$pp{$a}} keys %pp;
	$rel=int(0.5+$pp{$pp_keys[0]}-$pp{$pp_keys[1]});
	$rel=9 if($rel>9);
	$number=".";
	$number="," if((int($i/5)*5)==$i);
	$number=int($i/10) if(int($i/10)*10==$i);
	$aa{1,$i}=substr($number,-1);
	$aa{2,$i}=$seq;
	$aa{3,$i}=$sec;
	$aa{3,$i}=" " if($sec eq "L");
	$aa{4,$i}=$rel;
	$aa{5,$i}=" ";
	$aa{6,$i}=$prH;
	$aa{7,$i}=$prE;
	$aa{8,$i}=$prL;
	$aa{9,$i}=$sec;
    }
}
close(seqss);
$n_line=int(($i-0.5)/60)+1;
open(proteinss,">protein.ss");
print proteinss "\n";
for($i=1;$i<=$n_line;$i++){
    for($j=1;$j<=9;$j++){
	print proteinss "$pre{$j}";
	for($k=60*($i-1)+1;$k<=60*$i;$k++){
	    $aa{1,$k}="." if(length $aa{1,$k}<1);
	    print proteinss "$aa{$j,$k}";
	}
	if(($j>=5 && $j<=8) or $j==1){
	    print proteinss "\n";
	}else{
	    print proteinss "|\n";
	}
    }
    print proteinss "\n\n";
}
close(proteinss);
printf "----- secondary structure done ----------\n";

######### run PROSPECT to generate 'protein.ppt' ##########
printf "---- alignment, doing:\n";
system("$prospect_dir/prospect.LINUX -phdfile protein.ss -freqfile protein.freq -o protein.ppt -tfile $template_dir/list");
############## following calculate Z-score
#system("$prospect_dir/prospect.LINUX -phdfile protein.ss -freqfile protein.freq -o protein.ppt  -reliab -tfile $template_dir/list");
## following is to using default structure library:
#system("$prospect_dir/prospect.LINUX -phdfile protein.ss -freqfile protein.freq -o protein.ppt -reliab");
printf "----- prospect done ----------\n";

########## rank the templates according to Zscore ##########
open(ppt,"protein.ppt");
$N_hit=0;
while($line=<ppt>){
    if($line=~/<rawScore>(\S+)<\/rawScore>/){
	$rawscore_tmp=$1;
    }
    if($line=~/templateSeq src=\"(\S+)\">/){
	$N_hit++;
	$p{$N_hit}=$1;
	$rawscore{$N_hit}=$rawscore_tmp;
	$rawscore_a+=$rawscore_tmp;
	$rawscore_a2+=$rawscore_tmp**2;
    }
}
close(ppt);
$rawscore_a/=$N_hit;
$rawscore_a2/=$N_hit;
$sd=sqrt($rawscore_a2-$rawscore_a**2);
for($i=1;$i<=$N_hit;$i++){
    $zscore{$p{$i}}=($rawscore_a-$rawscore{$i})/$sd;
}
@zscore_keys=sort{$zscore{$b}<=>$zscore{$a}} keys %zscore;
### first hit is:  $zscore_keys[0]
### second hit is: $zscore_keys[1]

###########################################################
##### create template file 'init.dat' #####################
###########################################################
open(init,">init.dat");
$i_t=0;
for($i=1;$i<=$N_hit;$i++){
    $template_name=$zscore_keys[$i-1];
    $zscore_value=$zscore{$zscore_keys[$i-1]};
    #printf "$i $template_name $zscore_value\n";
    ######## read the alignment -------->
    open(ppt,"protein.ppt");
    while($line=<ppt>){
	if($line=~/templateSeq src=\"$template_name\"/){
	    while($line1=<ppt>){
		if($line1=~/\<target\s+\>(\S+)\<\/target\>/){
		    $sequenceQ=$1;   #query sequence
		}
		if($line1=~/\<template \s+\>(\S+)\<\/template\>/){
		    $sequenceT=$1;         #template sequence
		}
		if($line1=~/\<templateFrom\>(\S+)\<\/templateFrom\>/){
		    $Tfrom=$1;
		}
		if($line1=~/\<targetFrom\>(\S+)\</){
		    $Qfrom=$1;
		}
		if($line1=~/\<\/alignmentInfo\>/){
		    goto pos1;
		}
	    }
	}
    }
  pos1:
    close(ppt);
    ####### get sequence identity of the alignment ------>
    $L=length $sequenceQ;
    $L_eq=0;  #number of identical residues
    $L_ali=0; #number of aligned residues
    for($j=1;$j<=$L;$j++){
	$sQ=substr($sequenceQ,$j-1,1);
	$sT=substr($sequenceT,$j-1,1);
	if($sQ ne "-" && $sT ne "-"){
	    $L_ali++;
	    if($sQ eq $sT){
		$L_eq++;
	    }
	}
    }
    $seq_id=$L_eq/($L_ali+.00001); # sequence idendity between target & template
    ###
    $idcut0=!ID_CUT!;
    if($idcut0<0.999){
	open(seqtmp,">seq.tmp");
	$itmp=0;
	open(template,"$template_dir/$template_name\.xml");
	while($line=<template>){
	    if($line=~/^RES\s+\S+\s+(\S+)\s+(\S*\d+)(\S*)\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)\s+(\S+)\s+(\S+)/){
		$stmp=$1;
		$itmp++;
		printf seqtmp "$stmp";
		if($itmp>=60){
		    printf seqtmp "\n";
		    $itmp=0;
		}
	    }
	}
	close(template);
	close(seqtmp);
	$align_rst=`./align protein.seq seq.tmp`;
	if($align_rst=~/Identical length\:\s+(\d+)/){
	    $id=$1/$Lch;
	    goto pos2 if($id>=$idcut0);
	}
    } 
    ###
    
    ########### find seqT1 ########################
    for($m=1;$m<$L;$m++){
	$a=substr($sequenceT,$m-1,1);
	if($a ne "-"){
	    $seqT1=$a;
	    goto pos7;
	}
    }
  pos7:;

    ####### read template conformation starting from $Tfrom #####
    open(template,"$template_dir/$template_name\.xml");
    while($line=<template>){
	if($line=~/^RES\s+\S+\s+(\S+)\s+(\S*\d+)(\S*)\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)\s+(\S+)\s+(\S+)/){
	    $seq1=$1;
	    $num=$2;
	    $num=~s/\s//mg;
	    $numa=$3;
	    $xx=$4;
	    $yy=$5;
	    $zz=$6;
	    if($num == $Tfrom && $seq1 eq $seqT1){
		$n=1;
		$seqT{$n}=$seq1;
		$numT{$n}=$num.$numa;
		$x{$n}=$xx;
		$y{$n}=$yy;
		$z{$n}=$zz;
		while($line=<template>){
		    if($line=~/^RES\s+\S+\s+(\S+)\s+(\S+)\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\S+)\s+(\S+)\s+(\S+)/){
			$n++;
			$seqT{$n}=$1;
			$numT{$n}=$2;
			$x{$n}=$3;
			$y{$n}=$4;
			$z{$n}=$5;
		    }
		    goto pos4 if($line=~/^END/);
		}
	    }
	}
    }
  pos4:
    close(template);

    ########## write alignment to 'init.dat' ------------------>
    $i_t++;
    $a=substr($template_name,0,4);
    if(length $template_name == 4){
	$b="_";
    }else{
	$b=substr($template_name,4,1);
	$b=~tr/a-z/A-Z/;
    }
    $temp_name="$a$b";
    printf init "%5d %8.3f %5d   %6s %8.3f %8.3f(=$L_ali/$Lch) (L_ali,Z,i,pdb,id,cov)\n",
    $L_ali,$zscore_value,$i_t,$template_name,$seq_id,$L_ali/$Lch;
    $iQ=$Qfrom-1;
    $iT=0;
    for($j=1;$j<=$L;$j++){
	$sQ=substr($sequenceQ,$j-1,1);
	$sT=substr($sequenceT,$j-1,1);
	if($sQ eq "-"){
	    $iT++;
	}
	if($sT eq "-"){
	    $iQ++;
	}
	if($sQ ne "-" && $sT ne "-"){
	    $iQ++;
	    $iT++;
	    printf init "ATOM  %5s  CA  %3s  %4d    %8.3f%8.3f%8.3f%5s %3s\n",
	    $iQ+$i_t*1000,$ts{$sQ},$iQ,$x{$iT},$y{$iT},$z{$iT},$numT{$iT},$ts{$sT};
	    if($sQ ne $seqQ{$iQ} || $sT ne $seqT{$iT}){
		print "$temp_name: $iQ - $sQ = $seqQ{$iQ} <> $iT - $sT = $seqT{$iT}\n";
	    }
	}
    }
    printf init "TER\n";
    goto pos3 if($i_t >= !N_TEMP!);
  pos2:;
}
 pos3:;

`cat $template_dir/list |wc`=~/(\S+)/;
$N_total=$1;
close(init);

open(init1,">init1.dat");
printf init1 "%5d %5d (N_temp, Lch)\n",$i_t,$Lch;
close(init1);
`cat init.dat >>init1.dat`;

`/bin/cp init1.dat    $data_dir/init!O!.BBB`;

################# endding procedure ######################
$time=`date`;
printf "ending time: $time";
`sync`;
`sync`;
sleep(1);
`rm -fr $work_dir`;

exit();

