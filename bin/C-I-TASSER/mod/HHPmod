#!/usr/bin/perl
use Math::Trig;

$lib="/nfs/amino-library";
$lib="/oasis/projects/nsf/mia181/zhanglab/library" if(!-d "$lib");
$libdir_local="$lib/local";

########### setup  the environment and Working DIRectory ###
#$ENV{'PATH'}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin:";
#$ENV{'LD_LIBRARY_PATH'}="/usr/local/lib:/usr/lib:/lib";
$ENV{'HHLIB'}="$libdir_local/hhsuite/lib/hh";  ##for hhblits

############### HHP #########################
# 1, all HHsearch related programs use library is at $lib/HMM which is
#    converted and updated from $lib/PDB.
# 2, HHM library update will only includes $lib/HHM/db.hhm (cal.hhm not updated)
# 
#############################################

%ts=(
     'GLY'=>'G',
     'ALA'=>'A',
     'VAL'=>'V',
     'LEU'=>'L',
     'ILE'=>'I',
     'SER'=>'S',
     'THR'=>'T',
     'CYS'=>'C',
     'MET'=>'M',
     'PRO'=>'P',
     'ASP'=>'D',
     'ASN'=>'N',
     'GLU'=>'E',
     'GLN'=>'Q',
     'LYS'=>'K',
     'ARG'=>'R',
     'HIS'=>'H',
     'PHE'=>'F',
     'TYR'=>'Y',
     'TRP'=>'W',

     'ASX'=>'B',
     'GLX'=>'Z',
     'UNK'=>'X',

     'G'=>'GLY',
     'A'=>'ALA',
     'V'=>'VAL',
     'L'=>'LEU',
     'I'=>'ILE',
     'S'=>'SER',
     'T'=>'THR',
     'C'=>'CYS',
     'M'=>'MET',
     'P'=>'PRO',
     'D'=>'ASP',
     'N'=>'ASN',
     'E'=>'GLU',
     'Q'=>'GLN',
     'K'=>'LYS',
     'R'=>'ARG',
     'H'=>'HIS',
     'F'=>'PHE',
     'Y'=>'TYR',
     'W'=>'TRP',

     'a'=>'CYS',
     'b'=>'CYS',
     'c'=>'CYS',
     'd'=>'CYS',
     'e'=>'CYS',
     'f'=>'CYS',
     'g'=>'CYS',
     'h'=>'CYS',
     'i'=>'CYS',
     'j'=>'CYS',
     'k'=>'CYS',
     'l'=>'CYS',
     'm'=>'CYS',
     'n'=>'CYS',
     'o'=>'CYS',
     'p'=>'CYS',
     'q'=>'CYS',
     'r'=>'CYS',
     's'=>'CYS',
     't'=>'CYS',
     'u'=>'CYS',
     'v'=>'CYS',
     'w'=>'CYS',
     'x'=>'CYS',
     'y'=>'CYS',
     'z'=>'CYS',

     'B'=>'ASX',
     'Z'=>'GLX',
     'X'=>'CYS',
    );

$o="!O!";
$s="!S!";
$tag="!TAG!";
$idcut0=!ID_CUT!;
$n_temp=!N_TEMP!;
$libdir="!LIB_DIR!";
$user="!USER!";
################# directories #############################
$data_dir="!DATA_DIR!/$s";  #for seq.txt and init.dat
$work_dir="/scratch/$ENV{USER}/$ENV{SLURM_JOBID}";
$work_dir="/tmp/$user/$tag" if (!-d "$work_dir" || ! "$ENV{SLURM_JOBID}");

$HHM_bin="$libdir/bin/HHM1.5";
################### our own database ###########
$HHM_db="$libdir/PDB";
#$pdbdb="/scratch/aminoproject_fluxoe/zhanglabs/HHpred_db/lomets.hhm";
$pdbdb="$libdir/HHM/db.hhm";
$caldb="$libdir/HHM/cal.hhm";
################ working directory ########################
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";
`/bin/rm -f $work_dir/*`;
`cp $libdir/bin/align ./align`;

################ make fasta sequence file #################
@seqtxts=`cat $data_dir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;
open(seq,">protein.seq");
printf seq ">protein\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check
    if($i==int($i/60)*60){
	printf seq "\n";
    }
}
printf seq "\n";
close(seq);

$hhbin="$libdir_local/hhsuite";
################ 2013_03 already link to 2016_02 ################
$hhdb ="$libdir_local/hhsuite/uniprot20_2016_02/uniprot20_2016_02";
####################### make protein.hhm ########################
######### HHblits 2.0 this program starts with HHsuite 2.0#######
printf "running HHblits to generate a profile  .....\n";
`$hhbin/bin/hhblits -d $hhdb -i protein.seq -oa3m protein.a3m  -n 3`;

printf "running addss.pl .....\n";
`$lib/bin/blast/addss.pl protein.a3m`; # ->protein.a3m, add psipred SS prediction (optional)

printf "generate a HMM from MSA .....\n";
`$hhbin/bin/hhmake -i protein.a3m`;
####### HHsearch 1.5 ###########
printf "Calibrate protein.hhm.....\n";
`$HHM_bin/hhsearch -cal -loc -mapt 0 -i protein.hhm -d $caldb`; #add EVD

printf "running hhsearch .....\n";
system("$HHM_bin/hhsearch -glob -mapt 0 -i protein.hhm -d $pdbdb -o protein.out -z 20000 -Z 30000 -b 20000 -B 30000 -v 0");

################ calculate Z-score ######################
open(dist,"protein.out");
$i=0;
while($line=<dist>){
    if($line=~/No Hit                             Prob E-value/){
	while($line=<dist>){
	    goto end_dist if($line=~/^No\s+\d+/);
	    if($line=~/(\d+)\s+(\S+)/){
		$i++;
		$NO{$i}=$1;
		$T_name{$i}=$2;
		#$score{$i}=substr($line,58,6);
		$score{$i}=substr($line,57,6);
		$score_a+=$score{$i};
		$score_a2+=$score{$i}**2;
	    }
	}
    }
}
 end_dist:;
close(dist);
$N_hit=$i;
$score_a/=$N_hit;
$score_a2/=$N_hit;
$dev=sqrt($score_a2-$score_a**2);
for($i=1;$i<=$N_hit;$i++){
    $zscore{$i}=-($score_a-$score{$i})/$dev;
    if($i>1){
	if($zscore{$i}>$zscore{$i-1}){
	    $zscore{$i}=$zscore{$i-1}-0.01;
	}
    }
}

###########################################################
##### create template file 'init.dat' #####################
###########################################################
open(init,">init.dat");
$i_t=0;
for($i=1;$i<=$N_hit;$i++){
    $zscore_value=$zscore{$i};
    $template_name=$T_name{$i};
    $pdb="$HHM_db/$template_name\.pdb";
    goto pos2 if(!-s "$pdb");
    
    ############ check homology ##############
    if($idcut0<0.999){
	$align_rst=`./align protein.seq $pdb 2`;
	if($align_rst=~/Identical length\:\s+(\d+)/){
	    $id=$1/$Lch;
	    goto pos2 if($id>=$idcut0);
	}
    }
    
    ###### read alignment ####################
    open(align,"protein.out");
    $L_ali=0;
    while($line=<align>){
	#if($line=~/^\>$template_name/){
	if($line=~/^No\s+$NO{$i}/){
	    while($line=<align>){
		goto pos4 if($line=~/No\s+\d+/);
		if($line=~/^Q protein\s+(\d+)\s+(\S+)\s+(\d+)\s+\(/){
		    $nQ=$1-1;
		    $sequenceQ=$2;
		}
		if($line=~/T\s+$template_name\s+(\d+)\s+(\S+)/){
		    $nT=$1-1;
		    $sequenceT=$2;
		    ###
		    $L=length $sequenceT;
		    for($j=1;$j<=$L;$j++){
			$sQ=substr($sequenceQ,$j-1,1);
			$sT=substr($sequenceT,$j-1,1);
			$nQ++ if($sQ ne "-");
			$nT++ if($sT ne "-");
			if($sQ ne "-" && $sT ne "-"){
			    $L_ali++;
			    $resQ{$L_ali}=$nQ;
			    $resT{$L_ali}=$nT;
			    $seqQ{$L_ali}=$sQ;
			    $seqT{$L_ali}=$sT;
			}
		    }
		}
	    }
	}
    }
  pos4:;
    close(align);
    
    ############ get coordinates from PDB file ---------->
    open(pdb,"$pdb");
    $n=0;
    $L_ali1=0;
    while($line=<pdb>){
	if(substr($line,12,4)=~/CA/){
	    $n++;
	    substr($line,22,4)=~/(\d+)/;
	    $tmp=$1;
	    ######## check whether the coordinate exist ---------->
	    for($j=1;$j<=$L_ali;$j++){
		if($tmp == $resT{$j}){
		    $L_ali1++;
		    $resQ1{$L_ali1}=$resQ{$j};
		    $seqQ1{$L_ali1}=$seqQ{$j};
		    $resT1{$L_ali1}=$resT{$j};
		    $seqT1{$L_ali1}=$seqT{$j};
		    $xyz{$L_ali1}=substr($line,30,24);
		    ##### check template sequence ----->
		    $tmp1=substr($line,17,3);
		    if($tmp1 ne $ts{$seqT1{$L_ali1}}){
			printf "Template mismatch warning: $template_name: $tmp1 ne $ts{$seqT1{$L_ali1}}!\n";
		    }
		    ##### check query sequence ----->
		    $tmp1=substr($sequence,$resQ1{$L_ali1}-1,1);
		    if($tmp1 ne $seqQ1{$L_ali1}){
			printf "Query mismatch warning: $template_name: $tmp1 ne $seqQ1{$L_ali1}!\n";
		    }
		    goto pos10;
		}
	    }
	  pos10:;
	}
    }
    close(pdb);
    #goto pos2 if($L_ali1/$Lch <0.35);   # Alignement is too short
    goto pos2 if($L_ali1<5);   # Alignement is too short
    
    ############## output init.dat ------------------>
    $i_t++;
    printf init "%5d %8.3f %5d   %6s\n",$L_ali1,$zscore_value,$i_t,$template_name;
    for($j=1;$j<=$L_ali1;$j++){
	printf init "ATOM  %5s  CA  %3s  %4d    %24s%5d %3s\n",
	$j,$ts{$seqQ1{$j}},$resQ1{$j},$xyz{$j},$resT1{$j},$ts{$seqT1{$j}};
    }
    printf init "TER\n";
    goto pos3 if($i_t >= $n_temp);
  pos2:;
}
 pos3:;
close(init);

open(init1,">init1.dat");
printf init1 "%5d %5d (N_temp, Lch)\n",$i_t,$Lch;
close(init1);
`cat init.dat >>init1.dat`;

`/bin/cp init1.dat            $data_dir/init$o\.HHP`;

################# endding procedure ######################
sleep(1);
`rm -fr $work_dir`;

exit();

