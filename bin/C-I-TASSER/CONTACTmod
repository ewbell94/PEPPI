#!/usr/bin/perl
#PBS -e !ERRFILE!
#PBS -o !OUTFILE!
#PBS -l !WALLTIME!
#PBS -l !NODE!

$s="!S!";
$o="";
$Q="!Q!";
$user="!USER!";

######## directories --------->
$datadir1="!DATADIR1!"; #without $s
$bindir="!BINDIR!"; 
$cont_dir  ="/nfs/amino-library/contact/NEW";# contact predictors
$nebcon_dir="/nfs/amino-home/zhng/library/yzhang/contact/NEW/NEBCON"; # should be changed to local after rsync

## reporting node --->
`hostname`=~/(\S+)/;
$node=$1;
printf "hostname: $node\n";
$time=`date`;
printf "starting time: $time";
$pwd=`pwd`;
printf "pwd: $pwd";

######## step-1: generate MSA ------------------------------->

########### program #################################
$build_msa="$nebcon_dir/hhsuite/scripts/build_MSA$o.py"; # for $o=12, resPRE.data.74

########### databases #################################
$hhblitsdb="/nfs/amino-home/zhng/local_library/uniclust30_2017_04/uniclust30_2017_04"; #31G
$jackhmmerdb="/nfs/amino-home/zhng/local_library/uniref90/uniref90.fasta"; #43G
$hmmsearchdb1="/nfs/amino-home/zhng/local_library/metaclust/metaclust.fasta"; #113G
$hmmsearchdb2="/nfs/amino-home/zhng/local_library/tara/taraprotein_all_final.fasta"; #49G

######## directory ########################################
$data_dir="$datadir1/$s";  #for seq.txt and init.dat
$work_dir="/tmp/!USER!/!TAG!";
$MSA_dir="$data_dir/MSA"; #for depositing MSA files
`mkdir -p $MSA_dir`;

################ working directory ########################
`/bin/rm -fr $work_dir`;
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";

######### seq.txt and Lch ------------------>
`cp $data_dir/seq.txt ./`;
@seqtxts=`cat ./seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;
open(seq,">$work_dir/protein.fasta");
printf seq ">protein\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check
    if($i==int($i/60)*60){
        printf seq "\n";
    }
}
printf seq "\n";
close(seq);

################ decide ncpu ###############
#####################################################################################
## we could not use too many CPUs, because if there are not $ncpu CPUs available it
## it will even slow down the jobs when multiple threads share few CPUs
$ncpu=2;
if($Lch>=400){
    $ncpu=4;
}

###################
if(!-s "$MSA_dir/protein.aln$o"){
    system("$build_msa $work_dir/protein.fasta -hhblitsdb=$hhblitsdb -jackhmmerdb=$jackhmmerdb -hmmsearchdb=$hmmsearchdb1 -ncpu=$ncpu"); ## option 1
    
    if(-s "$work_dir/protein.aln"){
	`/bin/cp $work_dir/protein.aln $MSA_dir/protein.aln$o`;
    }else{
	print "error: without MSA file generate!\n";
	exit();
    }
}

######## step-2: submit contact prediction --------------->
@FF=qw(

GREMLIN
DNCON
METAPSICOV2
METAPSICOV
PSICOV
DEEPCONTACT
RICMAP

RESTRIPLET
TRIPLETRES
RESPRE
RESPLM
DEEPCOV
DEEPPRE
DEEPPRE2
DEEPPLM

NEBCON

); #15 predictor programs

#DNCON cannot be run at head node and must use real user_name

%y=(
    "GREMLIN"=>"gremlin",
    "DNCON"=>"dncon",
    "METAPSICOV2"=>"metapsicov2",
    "METAPSICOV"=>"metapsicov,ccmpred,freecontact",
    "PSICOV"=>"psicov",
    "DEEPCONTACT"=>"deepcontact",
    "RICMAP"=>"ricmap",
    
    "RESTRIPLET"=>"restriplet",
    "TRIPLETRES"=>"tripletres",
    "RESPRE"=>"respre",
    "RESPLM"=>"resplm",
    "DEEPCOV"=>"deepcov,deepcov_covar",
    "DEEPPRE2"=>"deeppre2",
    "DEEPPLM"=>"deepplm",
    "DEEPPRE"=>"deeppre",
    
    "NEBCON"=>"nebconB,bayes,nebconA,nebconB_rspr",
    ); #output of each programs

### output all contact files should be generated by mk_contact.pl --->
open(a,">$data_dir/contact.txt");
foreach $F(@FF){
    @aa=split(",",$y{$F});
    foreach $a(@aa){
	print a "$a\n";
    }
}
close(a);

$qzy=`$bindir/qzy`;

$MSA="protein.aln";
$recorddir="!RECORDDIR!";
`mkdir -p $recorddir`;
foreach $F(@FF){
    
    $modfile="$bindir/${F}mod";
    $jobmod=`cat $modfile`;
    $f=lc($F);
    
    ###
    $tag="$F\_$s\_$o"; # unique name
    
    ######## prepare job file -------->
    $jobname="$recorddir/$tag";
    $errfile="$recorddir/err_$tag";
    $outfile="$recorddir/out_$tag";
    $walltime="walltime=10:00:00,mem=8000mb";
    if($F eq "GREMLIN"){
	$walltime="walltime=20:00:00,mem=12000mb";
    }
    if($Lch>800){
	$walltime="walltime=48:00:00,mem=20000mb";
    }
    $node="nodes=1:ppn=1";
    ###
    #------- jobname ------>
    $mod=$jobmod;
    $mod=~s/\!ERRFILE\!/$errfile/mg;
    $mod=~s/\!OUTFILE\!/$outfile/mg;
    $mod=~s/\!WALLTIME\!/$walltime/mg;
    $mod=~s/\!NODE\!/$node/mg;
    ##
    $mod=~s/\!TAG\!/$tag/mg;
    $mod=~s/\!S\!/$s/mg;
    $mod=~s/\!O\!/$o/mg;
    $mod=~s/\!USER\!/$user/mg;
    $mod=~s/\!DATA_DIR\!/$datadir1/mg;
    $mod=~s/\!BIN_DIR\!/$nebcon_dir/mg;
    $mod=~s/\!CON_DIR\!/$cont_dir/mg;
    $mod=~s/\!BINDIR\!/$bindir/mg;
    $mod=~s/\!MSA\!/$MSA/mg;
    open(job,">$jobname");
    print job "$mod\n";
    close(job);
    `chmod a+x $jobname`;
    
    ########## skip the job if contact files are created ------>
    @aa=split(",",$y{$F});
    $miss="no";
    foreach $a(@aa){
	if(-s "$data_dir/$a.dat" <10){
	    $miss="yes";
	}
    }
    if($miss eq "no"){
	printf "$data_dir/$a.dat exist, neglect the job\n";
	goto pos1;
    }
=pod    
    ######### check whether the job is running ##########
    if($jobname=~/record\/(\S+)/){
	$jobname1=$1;
	if($qzy=~/$jobname1/){
	    printf "$jobname1 is running, neglect the job\n";
	    goto pos1;
	}
    }
    
    #printf "$jobname\n";
    #system("$jobname");
    #exit();
    
  pos42:;
    $bsub=`qsub -q $Q $jobname`;
    chomp($bsub);
    if(length $bsub ==0){
	sleep(20);
	goto pos42;
    }
    $date=`/bin/date`;
    chomp($date);
    open(note,">>$recorddir/note.txt");
    print "$jobname\t at $date $bsub\n\n";
    print note "$jobname\t at $date $bsub\n";
    close(note);
    #sleep(1);
=cut
    print `$jobname`;
  pos1:;
}

################# endding procedure ######################
$time=`date`;
printf "ending time: $time";
`sync`;
`sync`;
sleep(1);
`rm -rf $work_dir`;

exit();
