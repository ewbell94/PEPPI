#!/usr/bin/perl
use Math::Trig;
############## 
#    this program try to run DMPfold from deep MSA
#    then build five sequence-based distance map restrainted models  ->init.DMPm
#    then use first model search the PDB folder by TM-align, then rank template by TM-score ->init.DMP
########### setup  the environment and Working DIRectory ###
$ENV{'PATH'}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin:";
$ENV{'LD_LIBRARY_PATH'}="/usr/local/lib:/usr/lib:/lib";

############### DMP #########################
# 1. The pdb library is at /nfs/amino-library/PDB
# 2. DMP is at /nfs/amino-library/contact/NEW/DMPfold
#############################################

$lib="/oasis/projects/nsf/mia181/zhanglab/library";
#$lib="/nfs/amino-home/zhng/library/yzhang";

%ts=(
     'GLY'=>'G',
     'ALA'=>'A',
     'VAL'=>'V',
     'LEU'=>'L',
     'ILE'=>'I',
     'SER'=>'S',
     'THR'=>'T',
     'CYS'=>'C',
     'MET'=>'M',
     'PRO'=>'P',
     'ASP'=>'D',
     'ASN'=>'N',
     'GLU'=>'E',
     'GLN'=>'Q',
     'LYS'=>'K',
     'ARG'=>'R',
     'HIS'=>'H',
     'PHE'=>'F',
     'TYR'=>'Y',
     'TRP'=>'W',

     'ASX'=>'B',
     'GLX'=>'Z',
     'UNK'=>'X',

     'G'=>'GLY',
     'A'=>'ALA',
     'V'=>'VAL',
     'L'=>'LEU',
     'I'=>'ILE',
     'S'=>'SER',
     'T'=>'THR',
     'C'=>'CYS',
     'M'=>'MET',
     'P'=>'PRO',
     'D'=>'ASP',
     'N'=>'ASN',
     'E'=>'GLU',
     'Q'=>'GLN',
     'K'=>'LYS',
     'R'=>'ARG',
     'H'=>'HIS',
     'F'=>'PHE',
     'Y'=>'TYR',
     'W'=>'TRP',

     'a'=>'CYS',
     'b'=>'CYS',
     'c'=>'CYS',
     'd'=>'CYS',
     'e'=>'CYS',
     'f'=>'CYS',
     'g'=>'CYS',
     'h'=>'CYS',
     'i'=>'CYS',
     'j'=>'CYS',
     'k'=>'CYS',
     'l'=>'CYS',
     'm'=>'CYS',
     'n'=>'CYS',
     'o'=>'CYS',
     'p'=>'CYS',
     'q'=>'CYS',
     'r'=>'CYS',
     's'=>'CYS',
     't'=>'CYS',
     'u'=>'CYS',
     'v'=>'CYS',
     'w'=>'CYS',
     'x'=>'CYS',
     'y'=>'CYS',
     'z'=>'CYS',

     'B'=>'ASX',
     'Z'=>'GLX',
     'X'=>'CYS',
    );

$o="!O!";
$o1="!O1!";  # version of MSA/proein.aln$o1
$s="!S!";
$tag="!TAG!";
$idcut0=!ID_CUT!;
$n_temp=!N_TEMP!;
$libdir="!LIB_DIR!";
$user="!USER!";
################# directories #############################
$data_dir="!DATA_DIR!/$s";  #for seq.txt and init.dat
#$work_dir="/tmp/$user/$tag";
$work_dir="/scratch/$ENV{USER}/$ENV{SLURM_JOBID}";
$work_dir="/tmp/$user/$tag" if (!-d "$work_dir" || ! "$ENV{SLURM_JOBID}");

############### DeepMSA ################
$msabuilderdir="$lib/contact/NEW/CIT_DeepMSA";
$msabuilder="$msabuilderdir/scripts/build_MSA.py";
################### our own database ###########

$dmpdir="/home/jlspzw/DMPfold";
$tmsearch="$dmpdir/TMsearch.py";
################ working directory ########################
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";
`/bin/rm -f $work_dir/*`;
`cp $libdir/bin/align ./align`;

system("cp /oasis/projects/nsf/mia174/jlspzw/PDB.zip ./");
system("unzip PDB.zip >unzip.log");

$pdbdir="$work_dir/PDB";
##### local database

################ make fasta sequence file #################
@seqtxts=`cat $data_dir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts)
{
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;
open(seq,">protein.seq");
printf seq ">protein\n";
for($i=1;$i<=$Lch;$i++)
{
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check
    if($i==int($i/60)*60)
    {
	printf seq "\n";
    }
}
printf seq "\n";
close(seq);

################ make protein.hhm #######################

`cp $data_dir/MSA/protein.a3m ./protein.a3m`;
`cp $data_dir/MSA/protein.aln ./protein.aln`;
printf "running dmpfold to build model from deep MSA .....\n";

system("$dmpdir/aln2maps.csh protein.aln  >builddmp.log");
system("rm -rf ./decoys");
system("cp protein.seq protein.txt");
system("$dmpdir/run_dmpfold_mod.sh protein.txt protein.21c protein.map ./decoys   >>builddmp.log");
#system("$dmpdir/run_dmpfold_mod.sh protein.txt protein.21c protein.map ./decoys 1  >>builddmp.log");
###### predicted TM-score and Z-score for DMPm is calculated from Predicted TM-score, Z0 and sigma is tuned by benchmark set
if( -s "./decoys/final_1.pdb")
{
      
	######## get final_X.pdb model in decoys folder
	system("cp ./decoys/final_1.pdb dmp_model1.pdb");
        system("cp ./decoys/final_1.pdb $data_dir/dmp_model1.pdb");

        system("$dmpdir/predict_tmscore.sh protein.txt protein.aln dmp_model1.pdb ./decoys/rawdistpred.current >etm.info ");
        $etmscore=0;
        open(etm,"etm.info");
        while($line=<etm>)
        {
           if($line=~/Estimated TM-score of \S+ is (\d+.*\d)/)
           {
               $etmscore=$1;
            }
        }
        close(etm);

        open(a,"dmp_model1.pdb");
        open(b,">init2.dat");
        $L_alim=0;
        $z=$etmscore;
        $template="dmpmodel";
        while($line=<a>)
        {
	    if(substr($line,12,4)=~/CA/)
            {
	    $L_alim++;
	    $LINE{$L_alim}=$line;
	    }
        }
        print b "1  $Lch (N_temp, Lch)\n";
        printf b "%5d %8.3f %5d %12s\n",$L_alim,$z,1,$template;
        for($j=1;$j<=$L_alim;$j++)
        {
	   print b "$LINE{$j}";
        }
        print b "TER\n";
        close(b);


	printf "search templates from PDB using first model by TM-align...\n";
	system("$tmsearch dmp_model1.pdb dmp_tmalign.txt $work_dir/PDB");

	################ calculate Z-score ######################
	open(dist,"dmp_tmalign.txt");
	$i=0;
	while($line=<dist>)
	{
			if($line=~/>(\S+)\s+(\d+.*\d)\s+(\d+.*\d)/)
			{
			$i++;
			$T_name{$i}=$1;
			#$score{$i}=substr($line,58,6);
			$score{$i}=$2;
			$score_a+=$score{$i};
			$score_a2+=$score{$i}**2;
			#print "$T_name{$i} $score{$i}\n";	    
			}
	}
	close(dist);

	$N_hit=$i;
	$score_a/=$N_hit;
	$score_a2/=$N_hit;
	$dev=sqrt($score_a2-$score_a**2);
	for($i=1;$i<=$N_hit;$i++)
	{
		$zscore{$i}=-($score_a-$score{$i})/$dev;
	}

	#print "$i $N_hit\n";

	###########################################################
	##### create template file 'init.dat' #####################
	###########################################################
	open(init,">init.dat");
	$i_t=0;
	for($i=1;$i<=$N_hit;$i++)
	{
		$zscore_value=$zscore{$i};
		$template_name=$T_name{$i};
		$pdb="$pdbdir/$template_name\.pdb";
		goto pos2 if(!-s "$pdb");
		
		############ check homology ##############
		if($idcut0<0.999)
		{
		$align_rst=`./align protein.seq $pdb 2`;
		if($align_rst=~/Identical length\:\s+(\d+)/)
		{
			$id=$1/$Lch;
			goto pos2 if($id>=$idcut0);
		}
		}
		
		###### read alignment ####################
		open(align,"dmp_tmalign.txt");
		while($line=<align>)
		{
			if($line=~/>$template_name\s+\d+.*\d\s+\d+.*\d/)
			{

			$sequenceT="";         #template sequence with gap
			
			$line1=<align>;
			$line1=~/(\S+)/;
			$sequenceT=$1;
		   
			
			$sequenceQ="";         #query sequence may has terminal gap
			
			$line1=<align>;
			$line1=~/(\S+)/;
			$sequenceQ=$1;
			}

		}
		close(align);
		$sequenceT=~s/\*//mg;
		$sequenceQ=~s/\*//mg;
		#print "$sequenceQ \n";
		#print "$sequenceT \n";
		###### need remove query terminal gap ########!!!!!!!
		####### get sequence identity of the alignment ------>
		$L=length $sequenceQ;
		$L_eq=0;  #number of identical residues
		$L_ali=0; #number of aligned residues
		for($j=1;$j<=$L;$j++)
		{
		$sQ=substr($sequenceQ,$j-1,1);
		$sT=substr($sequenceT,$j-1,1);
		if($sQ ne "-" && $sT ne "-")
		{
			$L_ali++;
			if($sQ eq $sT)
			{
			$L_eq++;
			}
		}
		}
		$seq_id=$L_eq/($L_ali+.0000001); #seq idendity betwen target & template
		system("cp $pdb ./$template_name.pdb");

		open(temppdb,"$template_name.pdb");
		$n=0;
		while($line=<temppdb>)
		{
		$ATOM=substr($line,0,4);
		$atom=substr($line,12,4);
		$atom=~s/\s//mg;
		if( $ATOM eq "ATOM" && $atom eq "CA")
		{
			$n++;
			$seqT{$n}=$ts{substr($line,17,3)}; #only for check
			  $numT{$n}=substr($line,22,4);
			$x{$n}=substr($line,30,8);
			$y{$n}=substr($line,38,8);
			$z{$n}=substr($line,46,8);
		}
		}
		close(temppdb);
		$i_t++;
		########## write alignment to 'init.dat' ------------------>
		$a=substr($template_name,0,4);
		if(length $template_name == 4)
		{
		$b="_";
		}else
		{
		$b=substr($template_name,4,1);
		$b=~tr/a-z/A-Z/;
		}
		$temp_name="$a$b";
		$template_name=~s/\\\./\./mg;
		printf init "%5d %8.3f %5d   %6s %8.3f %8.3f(=$L_ali/$Lch) (L_ali,Z,i,pdb,id,cov)\n",
		$L_ali,$zscore_value,$i_t,$template_name,$seq_id,$L_ali/$Lch;
		$iQ=0;
		$iT=0;
		for($j=1;$j<=$L;$j++)
		{
		$sQ=substr($sequenceQ,$j-1,1);
		$sT=substr($sequenceT,$j-1,1);
		if($sQ eq "-")
		{
			$iT++;
		}
		if($sT eq "-")
		{
			$iQ++;
		}
		if($sQ ne "-" && $sT ne "-")
		{
			$iQ++;
			$iT++;
			printf init "ATOM  %5s  CA  %3s  %4d    %8.3f%8.3f%8.3f%5s %3s\n",
			$iQ,$ts{$sQ},$iQ,$x{$iT},$y{$iT},$z{$iT},$numT{$iT},$ts{$sT};
			if($sQ ne $seqQ{$iQ} || $sT ne $seqT{$iT})
			{
			print "$temp_name: $iQ - $sQ = $seqQ{$iQ} <> $iT - $sT = $seqT{$iT}\n";
			}
		}
		}
		printf init "TER\n";
		goto pos3 if($i_t >= $n_temp);

	 pos2:;
	}
	 pos3:;
	close(init);


open(init1,">init1.dat");
printf init1 "%5d %5d (N_temp, Lch)\n",$i_t,$Lch;
close(init1);
`cat init.dat >>init1.dat`;

} ##### end if final_1.pdb exist
else
{

printf "final_1.pdb is not exist!";

open(init1,">init1.dat");
printf init1 "0  $Lch (N_temp, Lch)\n";
close(init1);

open(init2,">init2.dat");
printf init2 "0  $Lch (N_temp, Lch)\n";
close(init2);

}


`/bin/cp init1.dat            $data_dir/init$o\.DMP`;
`/bin/cp init2.dat            $data_dir/init$o\.DMPm`;
################# endding procedure ######################
sleep(1);
`rm -fr $work_dir`;

exit();

