#!/usr/bin/perl
use Math::Trig;

############### PRC ############################

$home="/nfs/amino-home/zhng";
$lib="/nfs/amino-library";

$ENV{'PATH'}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin:$lib/bin/sam/sam3.3.1.i686-linux/bin";
$ENV{'LD_LIBRARY_PATH'}="/usr/local/lib:/usr/lib:/lib";

##### report node -------->
`hostname`=~/(\S+)/;
$node=$1;
printf "hostname: $node\n";
$time=`date`;
printf "starting time: $time";
$pwd=`pwd`;
printf "pwd: $pwd";
#^^^^^^^^^^^^^^^^^^^^^^^^^^

%ts=(
     'GLY'=>'G',
     'ALA'=>'A',
     'VAL'=>'V',
     'LEU'=>'L',
     'ILE'=>'I',
     'SER'=>'S',
     'THR'=>'T',
     'CYS'=>'C',
     'MET'=>'M',
     'PRO'=>'P',
     'ASP'=>'D',
     'ASN'=>'N',
     'GLU'=>'E',
     'GLN'=>'Q',
     'LYS'=>'K',
     'ARG'=>'R',
     'HIS'=>'H',
     'PHE'=>'F',
     'TYR'=>'Y',
     'TRP'=>'W',

     'ASX'=>'B',
     'GLX'=>'Z',
     'UNK'=>'X',

     'G'=>'GLY',
     'A'=>'ALA',
     'V'=>'VAL',
     'L'=>'LEU',
     'I'=>'ILE',
     'S'=>'SER',
     'T'=>'THR',
     'C'=>'CYS',
     'M'=>'MET',
     'P'=>'PRO',
     'D'=>'ASP',
     'N'=>'ASN',
     'E'=>'GLU',
     'Q'=>'GLN',
     'K'=>'LYS',
     'R'=>'ARG',
     'H'=>'HIS',
     'F'=>'PHE',
     'Y'=>'TYR',
     'W'=>'TRP',

     'a'=>'CYS',
     'b'=>'CYS',
     'c'=>'CYS',
     'd'=>'CYS',
     'e'=>'CYS',
     'f'=>'CYS',
     'g'=>'CYS',
     'h'=>'CYS',
     'i'=>'CYS',
     'j'=>'CYS',
     'k'=>'CYS',
     'l'=>'CYS',
     'm'=>'CYS',
     'n'=>'CYS',
     'o'=>'CYS',
     'p'=>'CYS',
     'q'=>'CYS',
     'r'=>'CYS',
     's'=>'CYS',
     't'=>'CYS',
     'u'=>'CYS',
     'v'=>'CYS',
     'w'=>'CYS',
     'x'=>'CYS',
     'y'=>'CYS',
     'z'=>'CYS',

     'B'=>'ASX',
     'Z'=>'GLX',
     'X'=>'CYS',
    );

@AA=qw(
       C
       M
       F
       I
       L
       V
       W
       Y
       A
       G
       T
       S
       Q
       N
       E
       D
       H
       R
       K
       P
       );

################# directories #############################
$data_dir="!DATA_DIR!/!S!";  #for seq.txt and init.dat
$idcut0=!ID_CUT!;

$tag="!TAG!";
$usrname="!USER!";
$o="!O!";
$idcut="!ID_CUT!"; 
$ntemp="!N_TEMP!";

$libdir_local="$lib";
 $work_dir="/tmp/$usrname/$tag";

################ working directory ########################
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";
`/bin/rm -fr $work_dir/*`;

`cp $libdir_local/bin/align ./align`;
 
################ make fasta sequence file #################
@seqtxts=`cat $data_dir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;
open(seq,">protein.seq");
printf seq ">protein $Lch\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check
    if($i==int($i/60)*60){
	printf seq "\n";
    }
}
printf seq "\n";
close(seq);

########### run SAM to generate a Hidden Markov Model #######################
$sam_dir="/nfs/amino-home/yzhang/library/yzhang/bin/sam/sam3.3.1.i686-linux/bin";
if(!-s "$sam_dir/sam-t99.conf"){
    print "sam bin missed\n";
    exit;    
}
chdir "$work_dir";
`$sam_dir/target99_zy -seed protein.seq -out swissprot 2> /dev/null`;
`$sam_dir/fw0.7 swissprot.a2m protein.mod  2> /dev/null`;

########### run PRC to search against the SAM library  ######################
my $sam_lib=`cat  $lib/PRC/sam_prf.lib`;
$sam_lib =~ s/\/library\/yzhang/\/nfs\/amino-library/mg;
open(SLIB, ">sam_prf.lib");
print SLIB $sam_lib;
close(SLIB);
`$lib/PRC/prc-1.5.6/prc  -hits 200 -Emax 100 -align prc protein.mod  sam_prf.lib m_output`;

#### exclude PDB ####
my @exclude_pdb_list=();
if (-s "$data_dir/exclude_pdb_list" )
{
    system("cp $data_dir/exclude_pdb_list $work_dir/exclude_pdb_list");
    foreach my $line(`cat $work_dir/exclude_pdb_list`)
    {
        push(@exclude_pdb_list,substr($line,0,4));
    }
}

$it=0;
open(init,">init.PRC")||die "can not open";
open(IN,"m_output.aligns")||die "can not open";
	while($line=<IN>)
	{
		chomp($line);
		if($line=~/^>protein~(\w+)~1 reg1=(\d+)-(\d+)\/\d+\s+reg2=(\d+)-(\d+)\/\d+/)
		{
			 $template_name=$1;
			 $query_start=$2;
			 $query_end=$3;
			 $template_start=$4;
			 $template_end=$5;

			 @wds=split(/\s+/,$line);  #### get the e-value
			 $len = @wds;
			 $e_value=$wds[$len-2];
			 $e_value=~s/^rev=//;
				
			 if(-e "$lib/PDB/$template_name\.pdb")  ### from local node
			 {
				`cp $lib/PDB/$template_name\.pdb ./temp.pdb`;
			 }
			 else ### from head node
			 {
				`cp $home/PDBall/$template_name\.pdb ./temp.pdb`;
			 }

###########################################################################

                        if (scalar @exclude_pdb_list)
                        {
                            $template_pdb_ID=substr($template_name,0,4);
                            foreach $exclude_pdb_ID (@exclude_pdb_list)
                            {
                                goto PPP if($template_pdb_ID eq $exclude_pdb_ID);
                            }
                        }

			if($idcut0<0.999)
			{
				 $align_rst=`./align protein.seq temp.pdb 2`;
				 if($align_rst=~/Identical length\:\s+(\d+)/)
				 {
					$id=$1/$Lch;
					if($id>=$idcut0)
					{
						goto PPP;
				        }
				 }
			}
			
			
			$query_hmm_aln=<IN>;
			$template_hmm_aln=<IN>;
			chomp($query_hmm_aln);
			chomp($template_hmm_aln);

			$len=length($query_hmm_aln);
			print "$len\n";

#			if(($len/$Lch)<0.35)  ### too short sequences
#			{
#				goto PPP;
#			}
			 
			 $it++;
			 
			##### read the template sequence from PDB  #############

			$template="";
			open(temppdb,"temp.pdb")||die "can not open";
			while($line=<temppdb>)
			{
				$ATOM=substr($line,0,4);
				$atom=substr($line,12,4);
				$atom=~s/\s//mg;
				if( $ATOM eq "ATOM" && $atom eq "CA")
				{		 
					$template = $template . $ts{substr($line,17,3)}; 		  
				}
			}
			close(temppdb)||die "can not close";

			###### end of read the template sequence from PDB ########

			PRC_alignment($sequence,$template,$query_hmm_aln,$template_hmm_aln,$query_start,$template_start,$query_end,$template_end,$e_value,$template_name);

                        if($it>($ntemp-1)) ### more than 20 templates
                        {
                                goto it_pos_end;
                        }

			PPP:;			

#####################################################################################################

		}
	}
it_pos_end:;
close IN || die "can not close";
close init || die "can not close init file";

#############################################################################

open(init1,">init1.dat");
printf init1 "%5d %5d (N_temp, Lch)\n",$it,$Lch;
close(init1);

`cat init.PRC >> init1.dat`;

`cp  init1.dat $data_dir/init$o\.PRC`;

#############################################################################

################# endding procedure ######################
$time=`date`;
printf "ending time: $time";
`sync`;
`sync`;
sleep(1);
`rm -fr $work_dir`;

exit();


##################################  

sub PRC_model
{
	$start_t_pos = $_[0];
	$sequenceT   = $_[1];
	$start_q_pos = $_[2];
	$sequenceQ   = $_[3];
	$template_name= $_[4]; 
	$score        = $_[5];
	$template_name = $_[6];

	$sequenceT=~s/\*//mg;
    	$sequenceQ=~s/\*//mg;
    	$sequenceT=~s/\s+//g;
    	$sequenceQ=~s/\s+//g; 
	
	####### get sequence identity of the alignment ------>
	$L=length $sequenceQ;
	    $L_eq=0;  #number of identical residues
	    $L_ali=0; #number of aligned residues
	    for($j=1;$j<=$L;$j++){
		$sQ=substr($sequenceQ,$j-1,1);
		$sT=substr($sequenceT,$j-1,1);
		if($sQ ne "-" && $sT ne "-"){
		    $L_ali++;
		    if($sQ eq $sT){
			$L_eq++;
		    }
		}
	    }
	$seq_id=$L_eq/($L_ali+.0000001); #seq idendity betwen target & template

	open(temppdb,"temp.pdb");
    	$n=0;
    	while($line=<temppdb>)
    	{
		$ATOM=substr($line,0,4);
		$atom=substr($line,12,4);
		$atom=~s/\s//mg;
		if( $ATOM eq "ATOM" && $atom eq "CA")
		{
		    $n++;
		    $seqT{$n}=$ts{substr($line,17,3)}; #only for check
		    $numT{$n}=substr($line,22,4);
		    $x{$n}=substr($line,30,8);
		    $y{$n}=substr($line,38,8);
		    $z{$n}=substr($line,46,8);
		}
    	}
    	close(temppdb);
    
    	########## write alignment to 'init.dat' ------------------>
    	$a=substr($template_name,0,4);
    	if(length $template_name == 4)
    	{
		$b="_";
    	}
    	else
    	{
		$b=substr($template_name,4,1);
		$b=~tr/a-z/A-Z/;
    	}
    	
	$temp_name="$a$b";
	$template_name=~s/\\\./\./mg;
	$zscore_value=1;
	printf init "%5d %8.3f %5d   %6s %8.3f %8.3f(=$L_ali/$Lch) (L_ali,Score,i,pdb,id,cov)\n",	
	$L_ali,$score,$it,$template_name,$seq_id,$L_ali/$Lch;
	
	$iQ=0;
	$iT=0;
	for($j=1;$j<=length($sequenceQ);$j++)        
	{
		$sQ=substr($sequenceQ,$j-1,1);
		$sT=substr($sequenceT,$j-1,1);
		
		if($sQ eq "-")
		{
		    $iT++;
		}
		
		if($sT eq "-")
		{
		    $iQ++;
		}
		
		if($sQ ne "-" && $sT ne "-")
		{
		
		    $iQ++;
		    $iT++;
		    
		    printf init "ATOM  %5s  CA  %3s  %4d    %8.3f%8.3f%8.3f%5s %3s\n",
		    $iQ+$it*1000,$ts{$sQ},$iQ+$start_q_pos-1,$x{$iT+$start_t_pos-1},$y{$iT+$start_t_pos-1},$z{$iT+$start_t_pos-1},$numT{$iT+$start_t_pos-1},$ts{$sT};
		    
		    if($sQ ne $seqQ{$iQ+$start_q_pos-1} || $sT ne $seqT{$iT+$start_t_pos-1})
		    {
		    	print "$temp_name : $iQ - $sQ = $seqQ{$iQ+$start_q_pos-1} <> $iT - $sT = $seqT{$iT+$start_t_pos-1}\n";
		    }
		    
		}
	 }
	 printf init "TER\n";
	
end_pos:;	
}


sub PRC_alignment
{

        my($query,$template,$hmm_query,$hmm_template,$query_start,$template_start,$qury_end,$tempalte_end,$output,$template_name);
        my($sequenceQ,$sequenceT,$count_q,$count_t,$a,$b,$i);

        $query    = $_[0];
        $template= $_[1];
	$hmm_query= $_[2];
        $hmm_template=$_[3];

        $query_start   =$_[4];
        $template_start=$_[5];
        $query_end     =$_[6];
	$template_end  =$_[7];
	$e_value       =$_[8];
	$template_name =$_[9];

	if($query_start==0){
		$query_start=1;
	}		

	if($template_start==0){
		$template_start=1;
	}

        $sequenceT="";
        $sequenceQ="";

        $count_q=0;
        $count_t=0;
        for($i=0;$i<length($hmm_query);$i++)
        {
                $a=substr($hmm_query,$i,1);
                $b=substr($hmm_template,$i,1);
                if(($a eq "M")||($a eq "D"))
                {
                        $sequenceQ = $sequenceQ . substr($query,$query_start+$count_q-1,1);
                        $count_q++;
                }
                elsif(($a eq "I")||($a eq "~"))
                {
                        $sequenceQ = $sequenceQ . "-";
                }
                else
                {
                        print "$a is unkown symbol\n";
                }


                if(($b eq "M")||($b eq "D"))
                {
                        $sequenceT = $sequenceT . substr($template,$template_start+$count_t-1,1);
                        $count_t++;
                }
                elsif(($b eq "I")||($b eq "~"))
                {
                        $sequenceT = $sequenceT . "-";
                }
                else
                {
                        print "$b is unkown symbol\n";
                }
        }

#        print "$sequenceQ\n";
#        print "$sequenceT\n";

        my $seq1=$sequenceQ;
        my $seq2=$sequenceT;

        my $count1 = $query_start-1;
        my $count2 = $template_start-1;	
	
	PRC_model($template_start,$sequenceT,$query_start,$sequenceQ,$template_name,$e_value,$template_name);

}

