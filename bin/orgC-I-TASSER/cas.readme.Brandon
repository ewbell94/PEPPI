Introduction:
    This readme should be used as a developers guide for making changes and
    improvements to the cas.f and mcas.f simulation programs. I have attempted
    to describe the purpose and use for all the functions and main variables
    used by both programs. There are a few functions/variables that I am not
    sure of the purpuse and they are designated as such.
    
Index:
    Overview: Overview of cas.f/mcas.f purpose
    Functions_Subroutines: Description of funcitons/subroutines purpose
    Common_Blocks: Description of large data strucutres and variables
        purpose.

Overview:
    cas.f and mcas.f are information guided replica exhange simulation to model
    single protein chains and protein-protein interactions respectively. The 
    simulation stores information from LOMETS as starting coordinates and 
    restraints to guide the simulation. The structure is allowed to move using
    move function such as move2,move3,move5, etc. The simulation movements 
    improvement are guided by the Energy functions: ESHORT, EHB and envir.
    ESHORT calculates energy scores based on satisfaction of contact and
    distance restraints. EHB calculates replica energy based on statistical and
    physical based energy scores. The envir data structure is used to determine
    propensity of each amino acid sidechain to be in a relative orientation 
    amongst the othe side chains. 


Functions_Subroutines:
    update_icaend: (for mcas.f) Keeps track of vectors representing virtual bonds
        to terminal region.
    ica2: (for mcas.f) Function that replaces the ica array. Allows for the
        artificial bond connecting the two protein chains.
    iscross_chain: used to determine if two residues are in different chains.
    calc_com: Calculates center of mass for the protein chain
    kyle_dolittle: stores kyle_dollite pair wise interface preference scores
    read_bin: stores binpari.comm data into ibin2. binpair.comm is a file that 
        contains a pairwise distance based contact potential
    read_pair: subroutine stores preference potential contained in pair.comm to
        variable bpair.
    get_interface: (for mcas.f) stores residues that are at the interface for a
        given replica into interface1 and interface2 arrays.
    read_interface6: stores 6A contact restraint data in intCA6.dat into the
        variables awint6, intc6, intp6
    read_interface8: stores 8A contact restraint data in intCA8.dat into the
        variables awint6, intc8, intp8
    read_interfacedist: stores interface distance restraint data in distINT.dat 
        into the variables distint,intcd,intpd 
    read_intcomb: stores sidechain contact restraint data in intcomb.dat into the
        variables awints, intcs, intps
    weight13: given the difference in energy between two structures determines
        the probability of the two stuctures being in both temperature settings.
        used to decide if moves/swaps should be accepted or rejected
    metro1: returns bool value regarding if move/swap should be accepted or
        rejected
    E_INTER: (for mcas) Calculates the interface energy score
    inter_move: (for mcas) rigid-body rotation/translation of second chain.
    inter_mover: (for mcas) rigid-body rotation of second chain.
    inter_movet: (for mcas) rigid-body translation of second chain.
    inter_dock: (for mcas) rigid-body translation docking if two chains not in
        contact
    set_common: initializes a set of common weights and parameters. 
    read_seq: Reads in seq.dat which contains protein sequence and predicted
        secondary structure stored into variables seq,and sec respectively.
    read_centro: initializes hydrophobic and hydrophylic profile data structures
        eonekd and eonehw. Also initialized acrit which is the expected radius
        of gyration of the protein.
    read_profile: stores contact orientation profile from profile3.comm into 
        envir variable
    read_E13: stores r13.comm into csre and csr variables. 
    read_E14: stores r14.comm,r14h.comm and r14e.comm into asrr,asrh,asre,asr
        and IBIN.
    read_E15: stores r15.comm,r15h.comm and r15e.comm into bsrr,bsrh,bsre,bsr
        and JBIN.
    read_quarsi3: stores quasi3.comm, pair3.dat into apablp, apablm, apabla,
        arlp, arlm, arla, ala,alm,alp, apa, apm, app
    read_par: stores par.dat and pair1.dat into apar1, apar2 and apar
    read_concut: stores contact.comm into concut and concut2 
    read_contactrestrain: stores comb.dat into aweig, Kcom, Mcom
    read_distantrestrain: stores dist.dat into Mdis, kdis, dist and dev 
    read_longdistantrestrain: stores distL.dat into MdisL, kdisL, and distL
    read_exp: stores exp.dat into area
    read_CAcontact: stores combCA into McomCA, KcomCA and aweigCA
    read_CAcontact8: stores combCA8 into McomCA8,KcomCA8 and aweigCA8
    read_seqcontact: stores svmseqca, svmseqcb and svmseqsg files.
        Also stores conf3.comm, svmcon.dat, spcon.dat. Stores values
        into Mcon, Kcon, awei
    reset_temperature: sets parameters for setting temperatures based on protein
        length.
    set_temperature: sets the temperatures for each replica level. Stores aT_rep
        aTs_rep, aTTs_rep
    set_EHB: sets secondary structure strength dependancy on EHB energy function
    prepare_vectors: Looks at all pairwise interger vectors that satisfy protein
        bond distances. Stores infomration in vx,vy,vz and vector
    prepare_neighbors: Looks at all pairwise vectors that satisfy protein like
        bond distances and angles. Stores goodc and angle
    prepare_beta: Creates datastructures to predicted positions of sidechain com,
        carbonyl carbon and amide proton given two integer vectors and amino acid.
        stores: gx,gy,gz,hx,hy,hz,axalf,ayalf,azalf,axbet,aybet,azbet,bxalf,
        byalf,bzalf,bxbet,bybet,bzbet
    prepare_frg: determines extended segments of secondary structure based on
        seq.dat file. Stores data into frgb variable.
    count_restrains: counts the number of restraints the current replica 
        satisfies.
    prepare_move2: Determines combinations of pairs of vectors that can replace
        oneaother and retain the connection in the protein chain. information
        stored in v21 and v22. This is for a 2 bond move
    prepare_move3: Determines combinations of pairs of vectors that can replace
        oneaother and retain the connection in the protein chain. information
        stored in v31,v32 and v33. This is for a 3 bond move.
    get_acorder: calculates contact order accoring to length and secondary
        structure (not really sure what that means.)
    read_initial: starting from templates aligned region in init.dat, read_initial
        converts the real coordinates to the integer grid and builds unaligned 
        regions by a random walk. Initializes xrep,yrep and zrep which stores
        the coordinates for each replica.
    random_initial: same as read_initial but builds chains completely by a
        random walk.
    template_initial: same as read initial but template aligned regions are
        frozen and not allowed to move. Stores egxrep,egyrep,egzrep,exrep,
        eyrep,ezrep,ecxrep,ecyrep,eczrep
    get_vvv: checks if two residues are clashing.
    secondary: (not sure what this does)
    alpha_helix: creates standard amino acid
    beta_sheet:  creates standard beta-sheet
    get_consensus: (Not sure)
    sort_ras: (Not sure)
    triangle: (Not sure)
    move_point:
    connect: 
    get_bond
    mcheck
    di: returns distance between two residues
    di2: returns squared distance between two residues
    aax: returns x coordinate of current replica residue
    aay: returns y coordinate of current replica residue
    aaz: returns z coordinate of current replica residue
    template_simulation: runs simulation where template aligned regions are 
        forzen and only allowed to undergo rotations/translations
    write_parameter: writes out paramters used in the simulation to file
    set_move_retio: sets the frequency of different moves used in the simulation
    set_current: stores the current replica into variables x,y,z inorder to 
        be used for the current simulation iteration
    set_current_RS: stores the current replica into variable ex,ey and ez in order
        to be used for the current template simulation iteration
    initial_move: calculates the full energy of the replica and initializes
        variables that keep track of all orientation contacts.
    get_center: calculates center of mass
    LOOK: checks for atom clash
    EHB: Calculates statisitcal energy component of I-Tasser energy function
    energyHBa: calculates hbond energy for alpha helix
    energyHBb: calculates hbond energy for beta sheet
    avv: (Not sure)
    ei5: (Not sure)
    ESHORT: Calculates energy score based on replicas ability to satisfy
        distance and contact restraints.
    move2: 2 bond move
    move3s: 3 bond move
    move3d: 3 bond move
    move4s: 4 bond move
    move4d: 4 bond move
    move5s: 5 bond move
    move5d: 5 bond move
    move6: rigid body translation move of small segment
    tran_N: rigid body translation move of small segment
    trot_N: rigid body translation move of small segment plus two bond move 
    defo_N: translation of off-lattice fragment plus a small deformation.
    tran_M: translation and rottation of off-lattice segment.
    rot_M: rotation of off-lattice segment.
    trot_M: translation and rotation of off-lattice segment.
    defo_M: translation and deformation of off-lattice segment
    tran_C: translation and rotation of c terminal segment
    trot_C: translation and rotation of off-lattice segment
    defo_C: translation and deformation of off-lattice segment
    move_n_end: movement of n terminal
    move_c_end: movement of c terminal
    move7a: structure shift move
    move7b: structure shift move
    move8:  random walk movement
    move9: (no idea)
    swap: attempt to swap two replicas
    metro_swap: determines if swap is acceptable based on energy of replicas
    swap_RS: attempt to swap two replicas during template_simulation
    test_neighbor: determine if all atoms in the backbone have protein like
        angles and bond distances
    test_overlap: test for clashing ca atoms and prints them to screen.
    energy_tot: calculates the total energy of a replica
    metro: calculate metropolis criteria. used to determine if move should
        be accepted or rejected
    weight12: flattens energy difference to better scale energy overlap to
        improve acceptance/rejection rate.
    square2: calculates the square of a variable
    arcsh: calculates the arcsine
    zyrmsd: calculates rmsd between a model and native structure
    u3b: calculates the rmsd and kabash rotation matrix
    eigenvalue: Calculates eigenvalues and eigenvectors from 3x3 matrix
    aranzy: given the random number from nozy updates the nozy values into
        a new random number

Common_Blocks:
    The common blocks are data structures that allow for large data variables to
    be passed around by subroutines and functions. Below is a description of the
    common blocks used by cas/mcas. Each common block will have: a description of
    the variables in the common block, the function that implements or stores
    values into the variable, and the input file where the data comes from if
    applicable.


logica/goodc
    Description:
       goodc(nvcec,nvec): is a boolean matrix. For all possible integer
       grid bonds it stores True if the angle between to given vectors is reasonable
       in a protein structure		 

    Initialization Function:
       goodc: prepare_neighbors

    Initialization File:
       goodc: None

three/angle(nvec,nvec)
    Description:
        angle(nvec,nvec): is a real matrix. Stores bond angles between a given pair
        of integer vectors

    Initializaiton Function:
        angle: prepare_neighbors

    Initialization File:
        angle: None


lengths/Lch,Lch1,Lch22
    Description:
        Lch: is an integer that is the length of the protein
        Lch1: is Lch-1
        Lch2: is Lch-2

    Initialization Function:
        Lch:  set_common 
        Lch1: set_common
        Lch2: set_common

    Initialization File:
        Lch:  rmsinp
        Lch1: rmsinp
        Lch2: rmsinp

lengths1/Lch11,Lch22
    Description (for mcas.f):
        Lch11 and Lch22: are variables in the mcas.f file for protein complex modeling
        they are the lengths of chain1 and chain2 respectively

    Initialization Function:
        Lch11 and Lch22: set_common

    Initialization File:
        Lch11 and Lch22: rmsinp

chainend/icaend
    Description (for mcas.f):
        icaend(1:4): is an array in mcas.f It is used to store the artificial 
        bond vectors at the terminal regions

    Initialization Function:
        icaend(1:4): update_icaend

    Initialization File:
        icaend(1:4) None


einterfaced/disint(ndim,ndim),intcd(ndim),intpd(ndim,ndim)
    Description (for mcas.f):
        distint(ndim,ndim): is real matrix that stores interface distance restratints
            the rows contain the residue number and each column is a different restraint
            for that residue. intpd keeps track of which I,J pair of residues indexes
            are in distint
        intpd(ndim,ndim): For each residue 'rows' the column stores the residues
            that the restraint is refering to.
        intcd(ndim): Contains a count of interface restraints for each residue

    Initialization Function: 
        disint, intpd, intcd: read_interfacedist

    Initialization File:
        disint, intpd, intcd: distINT.dat


einterface8/awint8(ndim,ndim), intc8(ndim) intp8(ndim,ndim)
    Description (for mcas.f):
        awint8(ndim,ndim): is real matrix that stores interface 8 Angstrom contact restratints
            the rows contain the residue number and each column is a different restraint
            for that residue. intp8 keeps track of which I,J pair of residues indexes
            are in awint8
        intp8(ndim,ndim): For each residue 'rows' the column stores the residues
            that the restraint is refering to.
        intc8(ndim): Contains a count of interface restraints for each residue

    Initialization Function: 
        awint8, intp8, intc8: read_interface8

    Initialization File:
        disint, intpd, intcd: intCA8.dat


einterface6/awint6(ndim,ndim), intc6(ndim) intp6(ndim,ndim)
    Description (for mcas.f):
        awint6(ndim,ndim): is real matrix that stores interface 6 Angstrom contact restratints
            the rows contain the residue number and each column is a different restraint
            for that residue. intp6 keeps track of which I,J pair of residues indexes
            are in awint6
        intp6(ndim,ndim): For each residue 'rows' the column stores the residues
            that the restraint is refering to.
        intc6(ndim): Contains a count of interface restraints for each residue

    Initialization Function: 
        awint6, intp6, intc6: read_interface6

    Initialization File:
        awint6, intp6, intc6: intCA6.dat


einterfaces/awints(ndim,ndim), intcs(ndim) intps(ndim,ndim)
    Description (for mcas.f):
        awints(ndim,ndim): is real matrix that stores interface sidechain-sidechain 
            contact restratints the rows contain the residue number and each column 
            is a different restraint for that residue. intps keeps track of 
            which I,J pair of residues indexes are in awints
        intps(ndim,ndim): For each residue 'rows' the column stores the residues
            that the restraint is refering to.
        intcs(ndim): Contains a count of interface restraints for each residue

    Initialization Function: 
        awints, intps, intcs: read_intcomb

    Initialization File:
        awints, intps, intcs: intcomb.dat

bin/ibin2(0:19,0:19,0:5)
    Description (for mcas.f):
        ibin2(0:19,0:19,0:5): is a 20x20x5 matrix. For all combinations of the
            standard amino acids. Each bin 1:5 corresponds to a pair of residues
            being in contact within a set distance.

    Initialization Function:
        ibin2: read_bin

    Initialization File:
        ibin2: binpair.comm

bpair/bpair(0:19,0:19)
    Description:
        bpair(0:19,0:19): For all pairs of 20 standard residues stores the preference
            for those to residues to be next to each other in the structure

    Initialization Function:
        bpair: read_pair

    Initialization File:
        bpair: pair.comm 


inter/n_interface1,n_interface2
    Description
        n_interface1, n_interface2: Stores the number of interface residues on each
            chain in the current replica

    Initialization Function:
        n_interface1, n_interface2: get_interface

    Initialization File:
        n_interface1, n_interface2: None

seqe/seq(ndim),sec(ndim)
    Description:
        seq (ndim): stores a integer that represents one of the standard 20 amino
            acids at each position in the protein sequence
        sec (ndim): stores the predicted secondary structure for each residue
            position

    Initialization Function:
        seq, sec: read_seq

    Initialization File:
        seq, sec: seq.dat

vectors/vx(nvec),vy(nvec),vz(nvec),vector(-5:5,-5:5,-5:5)
    Description:
        vx,vy,vz: Each indicie stores the corresponding x,y,z coordinates for a
            given vector
        vector(i,j,k): given idicies between -5:5 for i,j,k a new idicie is returned
            that is used in vx,vy,vz to obtain the corresponding coordinates for that
            vector

    Initialization Function:
        vx,vy,vz,vector: prepare_vectors

    Initialization File:
        vx,vy,vz,vector: None

bisec/cax(nvec,nvec),cay(nvec,nvec),caz(nvec,nvec)
    Description:
        cax(nvec,nvec), cay(nvec,nvec), caz(nvec,nvec): Given a pair of integer
            grid vectors. cax,cay,caz stores the predicted position of the
            sidechain center of mass. cax, cay, cax store the x,y,z coordinates
            of the sidechain respectively

    Initialization Function:
        cax,cay,caz: prepare_beta

    Initialization File:
        cax,cay,caz: None

hb/hbx(nvec,nvec),hby(nvec,nvec),hbz(nvec,nvec)
    Description:
        hbx,hby,hbz: Given a pair of integer grid vector hbx,hby,hbz return
            the x,y and z coordinates of a hydrogen on the amino acid that is
            available for hydrogen bonding

    Initialization Function:
        hbx,hby,hbz: prepare_beta

    Initialization File:
        hbx,hby,hbz: None

cutoff/cut1a,cut2a,cut3a,cut4a,cut1b,cut2b,cut3b,cut4b
    Description: common variable is deprecated and not in use

hopp/eonehw(0:19)
    Description:
        eonehw(0:19): stores hydrophobicity of the sidechain for the standard 20
            amino acids

    Initialization Function:
        eonehw: read_centro

    Initialization File:
        eonehw: None

looks/exc,exc1,exc2
    Description: exc, exc1, exc2: are different cuttof values used to consider
        if two atoms are clashing.

    Initialization Function:
        exc, exc1, exc2: main

    Initialization File:
        exc, exc1, exc2: in.dd

hba/eh5a,Cr2a,acut_bb,acut_cc,acut_vv,acut_hh
    Description: Parameters used for deciding if structure is a helix
        eh5a: Alpha Hydrogen bond energy weight
        Cr2a and acut_cc: Minimum and maximum distance between a set of residues
            that is acceptable for a alpha-helix
        acut_vv, acut_bb, acut_hh: other length and angle parameters used to
            determine if a set of residues have helix structure

    Initialization Function:
        All variable initialized in main

    Initialization File:
        All variable values come from in.dd

hbb/eh5b,Cr2b,bcut_bb,bcut_cc,bcut_vv,bcut_hh
    Description: Parameters used for deciding if structure is a sheet
        eh5b: Alpha Hydrogen bond energy weight
        Cr2b and bcut_cc: Minimum and maximum distance between a set of residues
            that is acceptable for a beta-sheet
        bcut_vv, bcut_bb, bcut_hh: other length and angle parameters used to
            determine if a set of residues have helix structure

    Initialization Function:
        All variable initialized in main

    Initialization File:
        All variable values come from in.dd

concutt/concut(0:19,0:19),concut2(0:19,0:19),concut_sc
    Description:
        concut: stores acceptable distance bewteen two residues to beable to be
            considered in contact
        concut2: the values in concut are squared.

    Initialize Function:
        concut,concut2: read_concut

    Initialize File:
        concut,concut2: contact.comm


arandom/aarand,abrand,acrand,adrand
    Description: These variables are no longer used

ENERGY/EH5,ES3,ES3a,ES3b,EH1,EH1a,EH4,EHBIJ(ndim,ndim)
    Description: Parameters for hydrogen bond network
        EH1,EH1a,EH4: Weights used in EHB energy function
        ES3,ESA,ES3B: Weights used in ESHORT energy function
        EHBIJ: Matrix of all residue pairs. Provides weights for forcing
            secondary structure restraints.

    Initialization Funtion:
        EH1, EH1A,EH4,ES3b,ES3a,ES3: main
        EHBIJ: set_EHB

    Initialization File:
        EH1, EH1A, EH4, ES3,ES3a,ES3b: in.dd
        EHBIJ: None

pair/apa(ndim,ndim),app(ndim,ndim),apm(ndim,ndim)
    Description: Orientation dependant sidechain energy contacts
        apa: antiparrallel pairwise contacts based on statistical energy and threading
                contacts
        app: parrallel pairwise contacts based on statistical energy and threading
                contacts
        apm: pairwise contacts based on statistical energy and threading
                contacts that are parallel or antiparallel
    Initialization Function:
        apa, app, apm: read_quarsi3

    Initialization File:
        apa, app, apm: quarsi3.comm, pair3.comm

size/arla(0:19,0:19),arlm(0:19,0:19),alrp(0:19,0:19)
    Description: Orientation dependant sidechain distance cutoffs
        arla: antiparrallel pairwise contacts minimum distance cutoff for contact
        arlp: parrallel pairwise contacts minimum distance cutoff for contact
        arlm: pairwise contacts minimum distance cutoff for contacts that are not parrallel or
            antiparallel
    Initialization Function:
        arla, arlp, arlm: read_quarsi3

    Initialization File:
        arla, arlp, arlm: quarsi3.comm

short/IBIN(-300:300),asr(ndim,-12:12)
    Description: Not sure

    Initialization Function: read_E14

    Initialization File: r14.comm, r14e.comm, r14h.comm


short1/JBIN(-300:300),bsr(ndim,-12:12)
    Description: Not sure

    Initialization Function: read_E15

    Initialization File: r15.comm, r15e.comm, r15h.comm



sizea/ala(0:19,0:19),alm(0:19,0:19),alp(0:19,0:19)
    Description: Orientation dependant sidechain distance cutoffs
        ala: antiparrallel pairwise contacts maximum distance cutoff for contact
        alp: parrallel pairwise contacts maximum distance cutoff for contact
        alm: pairwise contacts maximum distance cutoff for contacts that are not parrallel or
            antiparallel
    Initialization Function:
        ala, alp, alm: read_quarsi3

    Initialization File:
        ala, alp, alm: quarsi3.comm

one/acrit,contt,eonekd(0:19),eoinp(0:19,0:100),es2,es1
    Description:
        acrit: expected radius of gyration based on protein length
        eonekd: hydrophobic potential for each amino acid side chain
        es2, es1: weights for ESHORT energy function
        contt: expected number of contacts based on protein length
        eoinp: Depricated

    Initialization Function:
        acrit: read_centro
        es2, es1: main
        contt: set_common

    Initialization File:
        acrit: None
        eonekd: None
        es2, es1: in.dd
        contt: None

shape/amx,amy,amz,afs(ndim),afsn(ndim)
    Description:
        amx,amy,amz: Depricated
        afs: Distance between residue and center of mass
        afsn: backup of afs

    Initialization Function:
        afs, afsn: ESHORT

    Initialization File: None

fr/frga(ndim),frgb(ndim)
    Description:
        frga: local alpha-helix secondary structure. Distance for continuous
                alpha segment
        frgb: local beta-sheet secondary structure. Distance for continous beta
                segment

    Initialization Function:
        frga, frgb: prepare_frg

    Initialization File:
        frga, frgb: seq.dat

RES/ER3,er5,er6,er7,Mcom(ndim),Kcom(ndim,100)
    Description:
        er3,er5,er6,er7: Restraint weights used in ESHORT
        Mcom: Number of contact restraints for each residue in chain
        Kcom: side_chain contact restraint value given residue number and restraint
            contact number

    Initialization Function:
        er3,er5,er6,er7: set_common
        Kcom, Mcom: read_contactrestrain

    Initializaition File:
        er3,er5,er6,er7: None
        Kcom, Mcom: comb.dat

RCN/Mdis(ndim),kdis(ndim,100),dist(ndim,100),dev(ndim,100)
    Description:
        Mdis,kdis,dist,dev are the variable that in total store
        the long distance restraints from the templates.

    Initialization Function:
        Mdis,kdis,dist,dev: read_distantrestratin

    Initialization File:
        Mdis,kdis,dist,dev: dist.dat

RCN1/ER1,arca1(ndim,ndim,50),N_resa1(ndim,ndim)
    Description:
        arca1, N_resa1 are deprecated. er1 is a weight
        for the ESHORT energy function

    Initialization Function: set_common
    Initialization File: in.dd

short2/codevsum,didevsum,csr(ndim,2)
    Description:
        codevsum, didevsum store summation of penalties for not satisfying
        contact and distance restraints respectively.
    Initializaiton Function: None
    Initialization File: None

shortcom/eh3,es4,es5,es6,es7,es7a,es7b,es7c
    Description:
        Variables with h in the name ie eh3 are weights used for EHB energy
        function. Variables with s are weights for ESHORT energy function.
    Initialization Function: set_common
    Initialization File: in.dd

sg/gx(nvec,nvec,0:19),gy(nvec,nvec,0:19),gz(nvec,nvec,0:19)
    Description:
        gx,gy,gz store precalculated x,y,z coordinates of side chain centers of
        mass. Two grid vectors and the integer representing the amino-acid are
        used to calculate the side chain position

    Initializaiton Function: prepare_beta

    Initialization File: sidechain.comm

maxi/maxin,vect1,vect2
    Description:
        These variable are no longer used

ehbc/envir(0:15,0:15,0:15,0:19,4),en1
    Description:
        en1 is a weight used for the environment profile.
        envir stores a preference score for a given amino acid to be surronded
        by the number of parallel, antiparallel and orhtogonal sidechain contacts

    Initialization Function:
        en1: set_common
        envir: read_profile

    Initialization File:
        en1: in.dd
        envir: profile3.comm

forpreparemove4/asrr(0:19,0:19,-12:12)
    Description:
        Helper variable used to store profile from text file and transfer
        information to other variables
    Initializaiton Function: read_E14
    Initialization File: r14.comm

lim/colim,dilim,coold,conew,diold,dinew,didev,codev
    Description:
        Stores contact and distance penalties for failure to satisfy restraint.
        The restraints are saved for the new and old structure so that the
        difference in restraint satisfaction can be compared.
    Initialization Function: None
    Initialization File: None

distres/er4,es3c
    Description:
        Restraint weights used in ESHORT energy function.

    Initialization Function: set_common
    Initialization File: in.dd

rmsdrange/nca1,nca2
    Description: Used in zyrmsd function to select range of residues to use in 
        calculating rmsd. Not sure if currently used anymore

CA/dx(ndim),dy(ndim),dz(ndim)
    Description:
        dx,dy,dz are used to store the x,y,z coordinates of the native structre
        when applicable

msichores/mischo
    Description: Variable no longer in use

ehbenergy/EHB1,EHB1a,EHB1b,EHB1c,EHB2,EHB3,EHB4,EHB5,EHB6
ehbenergy/EHB5a,EHB5b
    Description:
        Each variable stores the value of an energy componenet of the EHB energy
        function calculations.
    Initialization Function: EHB

eshortenergy1/ESHORT1,ESHORT2,ESHORT3,ESHORT4,ESHOR11
eshortenergy2/ESHORT4a,ESHORT5,ESHORT5a,ESHORT5b,ESHORT5c
eshortenergy3/ESHORT6,ESHORT7,ESHORT8,ESHORT9,ESHORT10
    Desription:
        Each variable stores the value of an energy componenet of the ESHORT 
        energy function calculations.
    Initialization Function: ESHORT

eshortinte/ESHORT24,ESHORT25,ESHORT26,ESHORT28
    Desription (for mcas.f):
        Each variable stores the value of an energy componenet of the ESHORT 
        energy function calculations. These energies are for the interface 
        restraints.
    Initialization Function: ESHORT

otherenergy/E_cord,E_cnum
    Description:
        E_cord and E_cnum store the contact order score and contact number score
        for the E_SHORT energy function

    Initialization Function: ESHORT

resnumber/Ncom,Ndis,accur
    Description:
        Ncom: Number of contact restraints
        Ndis: Number of distance restraints
        accur: No longer in use

    Initializaition Function:
        Ncom: read_contactrestrain
        Ndis: read_distanrestrain

initialinput/switch,k_cycle,k_phot,N_ann
    Description:
        switch: variable used to determine if use template simulation or
            grid simulation
        All other variable no longer in use

    Initialization Funciton: set_common

    Initialization File: in.dd

thrtem/aT_ann(100)
    Description: Variable no longer in use

outputxyz/fxyz(3,ndim)
    Description: Variable no longer in use

temperature/itemp,atemp
    Description:
        itemp: stores the integer representing the current replica trajectory
            being used
        atemp: stores the temperature that is used given the current replica
        
        Both variables used in main simulation cycle.

beta1/axalf(0:19),ayalf(0:19),azalf(0:19)
beta2/axbet(0:19),aybet(0:19),azbet(0:19)
    Description:
        axalf,ayalf,azalf: x,y,z vector for sidechain center of mass of standard
            amino acid in alpha-helix
        axbet,aybet,azbet: x,y,z vector for sidechain center of mass of standard
            amino acid in beta-sheet

pair1/eh2/eh1b,eh1c
    Description:
        eh2,eh1b,eh1c: Weights used in EHB energy function

    Initialization Function: set_common
    Initialization File: in.dd

paircut/ash
    Description: Width of energy well. Only used in read_quarsi3 function
        to help initialize other variables.

countres/t_comb,t_dist,t_combCA,s_comb,s_dist,s_combCA
countres1/t_combCA8,t_distL,s_combCA8,s_distL,N_resc
    Description:
        Each variable stores the number of restraints a particular replica
        satisfies
    Initialization Function: count_restrains

nswap/bNSa(100),bNSt(100)
naccept/bNa(100),bNt(100),bNNa(100),bNNt(100)
naccept1/bN5a(100),bN5t(100)
    Description:
        Variables used to keep track of number of accepted swaps, and
        accepted moves

mov2/v21(nvec,nvec,80), v22(nvec,nvec,80),Np2(nvec,nvec)
    Description:
        v21: 1st vector for two bond move
        v22: 2nd vector for two bond move
        Np2: number of vector pairs can replace the old path.

    Initialization Function: prepare_move2
    Initialization File: None

order/acorder,en2,sumct,sumcto,icnt,icnto,dord,en3
    Description:
        acorder: number of expected contacts based on protein length
        en2: weight for EHSHORT
        sumct:
        sumcto:
        icnt:
        icnto:
        dord:
        en3:
    Initialization Function:
        acorder: get_acorder
        en2: set_common

envir1/nop(ndim),nom(ndim),noa(ndim),nhbn(ndim)
backup1/NOPP(ndim),NOMM(ndim),NOAA(ndim),NHBNN(ndim)
backup2/eprofo,eprofn,energ
    Description: nop, nom, noa store the number of parallel, orthogonal and
        antiparallel contacts for the environment profile. NOPP, NOMM and
        NOAA are backup variables for nop, nom, and noa respectively

        eprofo: stores energy for old structure environment
        eprofn: stores energy for new structure environemnt
        energ:  stores total energy

moverange/Mran1,Mran2,Mend,Mend_N,Mend_C
    Description:
        These variables store parameters that limit the maximum range of
        a movement.

pairmap2/apabla(0:19,0:19),apablp(0:19,0:19)
pairmap3/apablm(0:19,0:19),amap(ndim,ndim),nmap
    Description:
        apabla, apablp, apablm store the propensity of two amino acids side chains
            to be oriented antiparallel, parallel or orthogonally to each other
            resepctively.
        amap and nmap are no longer used

    Initialization Function: read_quarsi3
    Initialization File: quasi3.comm

moveretio1/h2,h3s,h3d,h4s,h4d,h5s,h5d,h6,h7,hend
moveretio2/bh2,bh3s,bh3d,bh4s,bh4d,bh5s,bh5d,bh6
moveretio3/bh7a,bh7b,bhendn,bhendc
    Description:
        Variable are used to set the frequency of each type of moves
        in the simulation.

icgg/icg(ndim),EH6
    Description: Variables no longer used

rs/i_thr0
    Description: Not sure what purpose of this variable is

frozen/L_cut,d_xyz0,d_xyz00(ndim),angle0,angle00(ndim)
    Description:
        Variables used to decide the allowed rotation and translation range
        for template moves

    Initialization Function: template_initial

nrepfile/n_repf
    Description:
        n_repf controls the number of output replicas written to file

    Initialization Function: set_common


commonuse1/random,cycle
    Description:
        random: random number seed for simulation
        ncycle: number of cycles for the simulation

    Initialization Function: set_common
    Initialization File: in.dd

commonuse2/atemp1,atemp2,N_rep,phot
    Description:
        atemp1, atemp2: variables used to control temperatures
        N_rep: Number of replicas used in simulation
        phot: controls size of for loop in simulation cycle
    Initialization Function: set_common
    Initialization File: in.dd

commonuse4/al2,al4,al5,al6,al7,al8,anvec
    Description: variables used but not sure where or why

gapmove2/ras2(ndim),nfl2
gapmove3/ras3(ndim),nfl3
gapmove4/ras4(ndim),nfl4
gapmove5/ras5(ndim),nfl5
gapmove6/ras6(ndim),nfl6
    Description:
        ras2,ras3,ras4,ras5,ras6 keeps track of what residue positions are free
        to undergo 2,3,4,5, and 6 bond moves respectively.
    Initialization Function: move_point

mng/m_g(100)
    Description: Variable no longer in use

acct/accept0
    Description: Variable no longer in use

movename/mname(100)
    Description: Variable stores the names of all the different moves

readinitial/m_initial
    Description: Variable no longer in use

eall/N_sum(100),energ_sum(100),energ_sum2(100),E_min
    Description:
        Variables used to sum the total energy of all the replicas over the
        simulation and get the average energy for a replica. (I think but not sure)

chain0/ras(ndim),nfl
    Description:
        Keeps track of which residues are forzen and moveable.
    Initialization Funciton: read_initial, template_initial

chain1/ica(0:ndim),x(ndim),y(ndim),z(ndim)
    Description:
        x,y and z: x,y and z coordinates for the current replica
        ica: integer vectors that make of current replica

echain0/nfr,nfr_i(ndim),nfr_f(ndim),ifr,n_fra
    Description:
        nrf: Number of frozen frgament
        nfr_i: starting point for jth frozen fragment
        nfr_f: ending point for jth forzen fragment
    Initalization Function: template_initial

echain1/ex(ndim),ey(ndim),ez(ndim)
echain2/egx(ndim),egy(ndim),egz(ndim)
echain4/ecx(ndim),ecy(ndim),ecz(ndim)
echain5/ebx(ndim),eby(ndim),ebz(ndim)
    Description: variables store coordinates for template_simulation
        ex,ey,ez: x,y,z coordinates for ca position
        egx,egy,egz: x,y,z coordinates for sidechain center of mass
        ecx,ecy,ecz: x,y,z coordinates for carbonyl carbon
        ebx,eby,ebz: x,y,z coordinates for amide hydrogen

    Initialization Function: set_current_RS

chainm/mv(ndim)
    Description:
        mv: stores which residues are on integer grid and are allowed to have
            real coordinates

sw1/aT_rep(nrep),E_rep(nrep)
    Description:
        aT_rep: temperature for each replica
        E_rep:  energy for each replica

sw2/xrep(ndim,nrep),yrep(ndim,nrep),zrep(ndim,nrep)
sw3/icarep(ndim,nrep)
    Description: 
        variables store x,y and z coordinates for all replicas
        icarep stores grid vectors that make up each replica
    Initialization Function: read_initial


sw5/exrep(ndim),eyrep(ndim),ezrep(ndim)
sw6/egxrep(ndim),egyrep(ndim),egzrep(ndim)
sw7/ecxrep(ndim),ecyrep(ndim),eczrep(ndim)
sw8/ebxrep(ndim),ebyrep(ndim),ebzrep(ndim)
    Description: variables store coordinates for template_simulation
        exrep,eyrep,ezrep: x,y,z coordinates for ca position for all replicas
        egxrep,egyrep,egzrep: x,y,z coordinates for sidechain center of mass for all replicas
        ecxrep,ecyrep,eczrep: x,y,z coordinates for carbonyl carbon for all replicas
        ebxrep,ebyrep,ebzrep: x,y,z coordinates for amide hydrogen for all replicas

    Initialization Function: template_simulation

weight/chuan
    Description:
        chuan a variable used to scale the weights
    Initialization Function: set_common
    Initialization File: in.dd

common/bigbond/i_bigbond/teco
    Description:
        i_bigbond: size of movements for forzen fragments
        teco: Not sure
    Initialization Function: set_common
    Initialization File: in.dd

ssp/ssp
    Description:
        ssp a variable set in in.dd to change the value of a specific weight
    Initialization Function: set_common
    Initialization File: in.dd

defoangle/defo_angle
    Description:
        defo_angle variable used to determine allowable size of deformation angle
        in deformation movements.

fractpair/fract_pair1,fract_pair3
    Description:
        fract_pair1,fract_pair3 variables used to scale values in apar profile
        variable.
    Initialization Function: set_common
    Initialization File: in.dd

zscore/izscore
    Description:
        Used to determine if target is easy, medium or hard. Used as a switch
        to set weigths in simulation
    Initialization Function: set_common
    Initialization File: in.dd

aTs/aTs1,aTs2,aTs_rep(nrep),aTs
aTTs/aTTs1,aTTs2,aTTs_rep(nrep),aTTs
    Description:
        Parameters used to set temperatures in simulation.
    Initialization Function: set_common
    Initialization File: in.dd

ichos/ichos
    Description:
        ichos used as a switch to decide how to normalize probablility of 
        energy overlap and swap rate
    Used IN: functions weight13 and weight12

nan1/nana
    Description:
        nana is a parameter used to keep track of the number of columns in
        exp.dat. Used for reading in the file
    Initializaiton Function: main
    Initialization File: in.dd

ranzy/nozy
    Description:
        nozy keeps track of the current random number. It is iterateively
        used to create the next random number.

hours/hour_max
    Description:
        hour max is the maximum amount of time allowed for the simulation to
        run. 
    Initialization Function: main
    Initialization File: in.dd

stick1/nstick,astick,nrmsd,ermsd
    Description:
        These variables are used to determine if model simumlation should be
        restrained by the rmsd to the template coordinates.
        nstick: flag used for incorporating template rmsd restraint
        astick: weight used for rmsd deviation energy score penalty
        nrmsd: flag used for incoporating template rmsd restraint
        ermsd: weight used for rmsd deviation energy score penalty 

stick2/iq(ndim,nrep):
    Description:
        iq keeps track of which residues coordinates started from the template
        aligned region and which ones were filled in by a random walk. It stores
        this information for all replicas.
    Initialization Function: read_initial, template_initial
    Initialization File: init.dat

stick3/ax00(ndim,nrep),ay00(ndim,nrep),az00(ndim,nrep)
    Description:
        ax00,ay00,az00: stores the x,y,z template aligned coordinates for each
            starting alignment.
    Initialization Function: read_initial, template_initial
    Initialization File: init.dat


    Initialization Function: read_initial, template_initial

stick6/bx00(ndim),by00(ndim),bz00(ndim),armsd_min0
    Description:
        Used but not sure of purpose.

trackn/n_tem(100)
    Description:
        n_tem keeps track of the current replicas rank vs its
        original starting position.

lattice/m_latt,latt1,latt2
        Description:
            m_latt: flag used to determine which values to assign latt1 and
                latt2
            latt1: miniminum distance between two endpoints of a pair of
                integer vectors that is still protein like
            latt2: maximinum distance between two endpoints of a pair of
                integer vectors that is still protein like

        Initialization Function:
            m_latt: main
            latt1,latt2: set_common
        Initialization File:
            m_latt: in.dd
            latt1,latt2: None

nwmax1/nvecr
    Description:
        nvecr: Maximum number of integer grid vectors

iter/n_run
    Description:
        n_run is the maximum number of iteration in the simulation

aminoacid/sequ(ndim)
    Description:
        sequ keeps track of the name of each residue in each position of the
            protein

    Initialization Funciton: read_seq
    Initialization File: seq.dat

stick7/itemp0,icycle,icycle0
    Description: Not sure

mloopf/mloop
    Description: Not sure

res2/er14,er15,er16,er17
    Description: Variables not in use

svm1/Mcon(15,ndim),Kcon(15,ndim,100),awei(15,ndim,ndim)
    Description:
        Variables used for sequence based contact restraints. Kcon has three inputs
        the first integer refers to which program decided the contact. The second
        referes to one of the residues in contact. The third integer refers to which
        number contact up to 100. The three values in kcon generate the second residue
        that is in contact. Mcon given a contact number and residue i keeps track of the
        total number of contacts in contact with residue i. awei is a weight restraint
        give the pair of residues in contact and which predicted contact is being used.
    Initialization Function: read_seqcontact
    Initialization File: svmseqca8.dat


svm2/acc_cut,dist_svm2(15),nk_svm(3),ik_svm(3,15)
    Description:
        acc_cut: value used to set sequence based contact weights
        dist_svm2, nk_svm, ik_svm: Not sure of purpose
    Initialization Function: read_seqcontact

svm3/er21,er22,er23
    Description:
        Weights used for sequence based contacts energy contribution used in ESHORT
    Initialization Function: set_common

svm4/acc_cutB,acc_cutG
    Description:
        acc_cutB and acc_cutG are parameters used to scale the sequence based
        contact confidence scores:
    Initialization Function: set_common
