#################################################################
# Disclaimer: C-I-TASSER is the software developed at Zhang Lab #
# at DCMB, University of Michigan. No any part of this package  #
# could be released outside the Zhang Lab without permission    #
# from the orginal authors. Violation of this rule may result   #
# in lawful consequences.                                       #
#################################################################

---------- update history of C-I-TASSER package ------------------
2018_09_01
	This is the first version of C-I-TASSER constructed from 
	   /nfs/amino-home/zhng/zhanglab_programs/I-TASSER/version_2016_04_15
 	with major changes including following:
	1, generate contact map prediction from >10 sequence-based programs
	2, integrate sequence-based contact-map predictions into I-TASSER. 
	   This change essentially converts I-TASSER into C-I-TASSER.
	3, updated many contact and distant potentials of I-TASSER
	4, update LOMETS by including HHWmod etc
	5, re-trained all weighting parameters of the I-TASSER force field

------- general information on how to run C-I-TASSER ------------
a, C-I-TASSER modeling needs four consecutive steps (please ensure
   the last step was completed before running the next step):
	1, prepare most input files (mkinput1.pl);
	2, generate restraint files from threading (mkinput2.pl)
	3, submit C-I-TASSER simulation jobs (submittasser.pl)
	4, cluster decoys and refine final models (cluser.pl)

b, Everytime when you run these programs, they will automatically check 
	(1) whether the output files were generated and if yes 
	    the job will be skip to next job or next target; 
	(2) whether the job is already running in the queue and 
	    if yes it will skip the submission and go to next 
	    target; 
	(3) whether your total number of jobs is beyond the
	    maximum number of jobs and if yes the program will
	    wait till the number is below the cutoff. The cutoff
	    can be tuned.
   Since the script is automated, it can be run in background.

c, The following steps are fully automated. All you need to 
   change are just a few variables at the top of the four 
   programs: mkinput1.pl, mkinput2.pl, submittasser.pl, cluster.pl.
   To view an example, please view files at 
   /nfs/amino-home/zhng/RUN_TASSER/version_2013_11_22/test/1ci4A 
      (C-I-TASSER input files and simulation decoys)
   /nfs/amino-home/zhng/RUN_TASSER/version_2013_11_22/test/cluster/1ci4A
      (final models are REF_model1.pdb)

d, the package include both I-TASSER (updated) and C-I-TASSER, depending on
   your setting of 'svmseq' (=yes: C-I-TASSER; =no: I-TASSER).

e, Brandon Govindarajoo provides a complete list of explanation of the core
   program (cas.f), which is available at 'cas.readme.Brandon'.

----------------------- Step by step ---------------------------
1, run 'mkinput1.pl'

   input files:
	seq.fasta  	(query sequence in FASTA format)
   output files:
	seq.seq  	(query sequence in FASTA format)
	seq.dat		(predicted secondary structure)
	seq.ss		(predicted secondary structure)
	rmsinp		(length file)
	exp.dat		(predicted solvant assessibility)
	pair3.dat	(general pair-wise contact potential)
	pair1.dat	(general pair-wise contact potential)
        init.XXX        (threading templates from XXX, eg, XXX=hhpred)
        XXX.dat         (contact  prediction from XXX, eg, XXX=respre)

   Notes:
	a, This program is to submit many small jobs including
	   secondary structure prediction, threading and contact prediction.
	   The overall runing of all the small jobs should take
	   about 1 hours if run normally (it is slower for some contact
	   predictions).
   	b, please change @ss, $user, $datadir, $bindir, $Q, $o,
	   at the top of 'mkinput1.pl'. When you set 'svmseq' to 'yes'
	   or 'no, it will change the codes to generate contact-map
	   or not accordingly.
	c, please change $run="real" or "benchmark" depending on 
	   you are running your target for real or benchmark. 
	   In benchmark test, we remove all homologous templates 
	   with sequence identity>30% to target. If you choose
	   "real", all templates will be used.
	d, All the intermediate files are deposited at $outdir/record
           When you find some of the input files fail to generate, you 
	   can rerun the specific jobs at $outdir/record, rather the 
	   entire 'mkinput.pl', e.g. if 'init.BBB' was not generated
	   due to some bugs, you can just rerun $outdir/record/BBB1_1ci4A.
	   The error and out files are also in this dir for debug.
	e, if your input files are wrong or not complete, Steps 2 & 3
	   will not be able to run through.

2, run 'mkinput2.pl'

   input files:
	init.XXX  	(threading tempaltes from XXX)
   output files:
	init.dat	(templates combined from all threading programs)
	comb.dat	(contact restraints from templates)
	dist.dat	(Side-chain distance restraints from tmpletes)
	combCA.dat	(CA distance restraints from tmpletes)
	comb8CA.dat	(CA distance restraints from tmpletes)
	distL.dat	(CA long-range dist restraints from tmplt)
	par.dat		(pair-wise restraints from templates)
        type.txt        (target type decided from init.XXX)

   Notes:
	a, this program is to collect all restraint files from the
	   threading templates. Normally, it takes < 1 minute.
	b, please change @ss and $outdir in the head of the program.
	c, if your threading jobs are not completed, this program 
	   will terminate. You need to wait till init.XXX are all 
	   done. This is to guarantee your programs are run correctly.
	d, you can run 'id.pl init.dat 0' to check how your template
	   alignments and secondary structure look like. This can give you
	   many helpful information about the templates.
        e, this programs does not deal with contact maps. Contact map
           weighting and combinations are done in next step of 
           'submittassermod'.

3, run 'submittasser.pl'

   input files:
	seq.txt  	(query sequence in FASTA format)
	seq.dat		(predicted secondary structure)
	seq.ss		(predicted secondary structure)
	rmsinp		(length file)
	exp.dat		(predicted solvant assessibility)
	pair3.dat	(general pair-wise contact potential)
	pair1.dat	(general pair-wise contact potential)
	init.dat	(templates combined from init.XXX)
	comb.dat	(contact restraints from templates)
	dist.dat	(Side-chain distance restraints from tmplt)
	combCA.dat	(CA distance restraints from tmplt)
	comb8CA.dat	(CA distance restraints from tmplt)
	distL.dat	(CA long-range dist restraints from tmplt)
	par.dat		(pair-wise restraints from templates)
        type.txt        (target type decided from init.XXX)
        XXX.dat         (contact map prediction from XXX, e.g. XXX=respre)
   output files:
        contact.map     (composite contact.map used by C-I-TASSER)
	out_*		(Statistics data of I-TASSER simulation)
	rep*tra*	(Decoy files generated by I-TASSER)

   Notes:
	a, this program is to submit a number of Monte Carlo simulation
	   jobs for I-TASSER/C-I-TASSER structure assembly simulations. 
	   Depending on protein size, it may take 5-30 hours.
	b, please change $s, $user, $datadir, $Q, $o at the top of 
	   'submittasser.pl' to your own. 'svmseq' (=yes or no) corresponds
	   to running C-I-TASSER or I-TASSER respectively.
	c, this program will check all the input files. If there are 
	   any files missed or incorrect, it will not submit jobs.
	   This is to guarantee you are running TASSER correctly.
	   You can also run 'checkinput.pl' directly to check if your 
	   input files are all correct.
	d, for some special request, you can change the number of jobs
	   and maximum time in this program.

4, run 'cluster.pl'

   input files:
        init.dat            (threading templates)
	rep*tra*.bz2  	    (decoys generate by C-I-TASSER)
   output files:
	REF_model[1-5].pdb  (refined model by FG-MD, final)
	model[1-5].pdb      (atomic models by MODELLER)
	model[1-5].pdb      (final predicted model)
	combo[1-5].pdb      (cluster centroid of SPICKER)
	closc[1-5].pdb      (old decoy closest to combo)
	stick[1-5].pdb      (new decoy closest to combo)
        cscore              (C-score information)
        rst.dat             (summary of SPICKER clustering)
        score               (TMs/GDT_HA score, if native given)
        HB                  (HB-score, if native given)

   Notes:
	a, this program is to submit the cluster jobs including
	   SPICKER and FG-MD. It takes 1-5 hours.
	b, This program will automatically check whether the TASSER 
       	   simulations are done. If simulations are not completed,
	   there will be no final models generated.
	c, if cluster models are already generated, this program 
	   will skip the target. So this program can be run repeatedly
	   but will not submit duplicated jobs.
	d, the trick to check the rep*tra*.bz2 is based on
	   $outdir/1xxx/simulationjob* generated by 'submittasser.pl'

---------------------FAQ-----------------------
1, How to make sure I am runing everything correctly?

   The program can self-check most of bugs. However, for a final test,
   if you run everything correctly, your results should be compariable 
   to that at $dir_CITASSER_backage/test. In the directory, the simulation decoys 
   with normal runs for a few protein are at $dir_CITASSER_backage/test/xxx/.
   The clustering results and final models are at $dir_CITASSER_backage/test/cluster/xxx/
   You can run similar proteins to test if you are running correctly.

2, How can I generate better results than the automated run?

   There are several places where you can improve C-I-TASSER. 
   First, you can include more threading templates, e.g. init.XXX.
   These are threading templates which guide the C-I-TASSER/I-TASSER simulations.
   It may also be wise to tune the alignment if you have any hints.
   Second, it may improve the results by run more simulations but this
   will take longer time. In submittasser.pl, the number of runs have
   been tuned for generating reasonable results.
   Third, since contact-map has impact on C-I-TASSER results, it will be helpful
   if you can include more contact prediction. However, if the programs are not
   from existing program, you need to modify $commondir/conf27.comm, which is 
   set to control contact confidence cutoffs. 

3, what programs do I need to change if I add a new threading program?

   You have to first train the new threading program to get Z-score cutoff.
   Then, you need to modify corresponding parameters in following programs:
	mkinput1.pl
	mkresmod
	mkinput2.pl
	init_alignT.pl
	get_cscore.pl
	
4, what programs do I need to change if I add a new contact prediction program?

   To add a new contact program, you need to change $commondir/conf27.comm, which 
   control the cutoff parameters of all contact programs used. You also need to change
   the parameter setting at 'mk_contactmap.pl' which classify contact programs into
   4 classes. However, the essential file needed to create is 'contact.map' which is 
   generated in 'submittassermod' and used by 'cas.f'. 
