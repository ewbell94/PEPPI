#!/usr/bin/perl
use strict;

my $o="";

my $qstat="scontrol show job";

if (@ARGV>0)
{
    $o=$ARGV[0];
    if ($o=~/^[0-9]+$/)
    {
        print `$qstat $o`;
        exit();
    }
}

my @lines;
while(1)
{
    @lines=`$qstat;`;
    my $nl=@lines;
    if($nl <10)
    {
        printf "no job $nl\n";
        sleep(10);
    }
    else
    {
        last;
    }
}
my $USER=$ENV{"USER"};
printf "  ID $USER\n";

my @gg=();
my %ng_r;
my %ng_t;
my %ng_low_r;
my %ng_low_t;
my %ng_high_r;
my %ng_high_t;
my %ng_casp_r;
my %ng_casp_t;
my $user="";
foreach my $line(@lines)
{
    if ($line=~/UserId=(\w+)/)
    {
        my $user="$1";
        next if ( grep( /^$user$/, @gg ) );
        push @gg, $user;
        $ng_r{$user}=0;
        $ng_t{$user}=0;
        $ng_low_r{$user}=0;
        $ng_low_t{$user}=0;
        $ng_high_r{$user}=0;
        $ng_high_t{$user}=0;
        $ng_casp_r{$user}=0;
        $ng_casp_t{$user}=0;
    }
}
@gg = sort @gg;


my $id="";;
my $jobname="";
my $q="";
my $status="";
my $runtime="";
my $memory="";
my $qtime="";
my $walltime="";
my $node="";
my $nn=0;

my $I=0;
my $nn_sub=0;
foreach my $line(@lines){
    $I++;
    $id=$1       if($line=~/JobId=(\d+)/);
    $jobname=$1  if($line=~/JobName=(\S+)/);
    $user=$1     if($line=~/UserId=(\w+)/);
    $q=$1        if($line=~/QOS=(\w+)/);
    $status=$1   if($line=~/JobState=(\S+)/);
    $runtime=$1  if($line=~/RunTime=(\S+)/);
    $memory=$1   if($line=~/,mem=(\w+),/);
    $qtime=$1    if($line=~/SubmitTime=(\S+)/);
    $walltime=$1 if($line=~/TimeLimit=(\S+)/);
    if($line=~/NodeList=(\S+)/)
    {
        $node ="$1";
        $node=~s/^nyx/n/g;
    }
    if($line=~/^\s*$/) #end of the job statement
    {
        $nn=1 if($status eq "RUNNING");
        if ($status eq "COMPLETED" || $status eq "CANCELLED" || 
            $status eq "TIMEOUT"   || $status eq "FAILED" ||
            $status eq "OUT_OF_MEMORY")
        {
            $id="";
            $jobname="";
            $user="";
            $q="";
            $status="";
            $runtime="";
            $memory="";
            $qtime="";
            $walltime="";
            $node="";
            $nn=0;
            next;
        }
	#$node="" if($status ne "R" && $status ne "S" && $status ne "E");
        $node=~s/\(null\)//g;
        $q=~s/normal/def/g;
        $q=~s/urgent/UG/g;
        $q=~s/casp/cas/g;
	foreach my $g(@gg){
	    if($user eq $g){ # Zhang-lab
		$ng_r{$g}+=$nn;
		$ng_t{$g}+=1;
                if ($q eq "def")
                {
		    $ng_low_r{$g}+=$nn;
		    $ng_low_t{$g}+=1;
                }
                elsif ($q eq "UG")
                {
		    $ng_high_r{$g}+=$nn;
		    $ng_high_t{$g}+=1;
                }
                elsif ($q eq "cas")
                {
		    $ng_casp_r{$g}+=$nn;
		    $ng_casp_t{$g}+=1;
                }
	    }
	}
        if (length $o && $o ne $user && $o ne $node && $o ne $status && $o ne $q)
        {
            $id="";
            $jobname="";
            $user="";
            $q="";
            $status="";
            $runtime="";
            $memory="";
            $qtime="";
            $walltime="";
            $node="";
            $nn=0;
            next;
        }

	
        printf "%7s %s %8s %5s %1s %9s %12s %20s %6s %s\n",
	        $id, substr($q,0,3), substr($user,0,8), $node,
                substr($status,0,1), $runtime, $walltime, $qtime,
                substr($memory,0,6), $jobname;
	    
        $id="";
        $jobname="";
        $user="";
        $q="";
        $status="";
        $runtime="";
        $memory="";
        $qtime="";
        $walltime="";
        $node="";
        $nn=0;
    }
}
#$N_high=160;
#$N_low=116; #58*2=116, 58*3=174 #///////
printf "--------      n_urgent  n_default    n_all      n_casp\n";
my $ng_rt=0;
my $ng_tt=0;
my $ng_low_rt=0;
my $ng_low_tt=0;
my $ng_high_rt=0;
my $ng_high_tt=0;
my $ng_casp_rt=0;
my $ng_casp_tt=0;
foreach my $g(@gg){
    next if ($ng_t{$g}==0);
    $ng_rt+=$ng_r{$g};
    $ng_tt+=$ng_t{$g};
    $ng_low_rt+=$ng_low_r{$g};
    $ng_low_tt+=$ng_low_t{$g};
    $ng_high_rt+=$ng_high_r{$g};
    $ng_high_tt+=$ng_high_t{$g};
    $ng_casp_rt+=$ng_casp_r{$g};
    $ng_casp_tt+=$ng_casp_t{$g};
    printf "%10s\_ %4d(%4d) %4d(%4d) %4d(%4d) %4d(%4d)\n", $g,
        $ng_high_t{$g},$ng_high_r{$g},
        $ng_low_t{$g}, $ng_low_r{$g},
        $ng_t{$g},     $ng_r{$g},
        $ng_casp_t{$g},$ng_casp_r{$g};
}
printf "%10s\_ %4d(%4d) %4d(%4d) %4d(%4d) %4d(%4d)\n", '_all', 
    $ng_high_tt, $ng_high_rt,
    $ng_low_tt,  $ng_low_rt,
    $ng_tt,      $ng_rt,
    $ng_casp_rt, $ng_casp_tt;
printf "---------\n";

############ count nodes ===================>
my $n_node_tot=0;
my $n_node_up=0;
my $n_node_down=0;
foreach my $line(`sinfo -N|grep -v NODELIST`)
{
    $n_node_tot+=1;
    if ($line=~/(\S+)\s*$/)
    {
        $status=$1;
    }
    if ($status ne "alloc" && $status ne "mix" && 
        $status ne "idle") { $n_node_down+=1; }
    else { $n_node_up+=1; }
}
my $n_cpu_per_node=20;
printf "#node_tot= %2d, #node_on= %3d, #node_down= %3d\n",
    $n_node_tot,$n_node_up,$n_node_down;
printf "#job_cap= %4d, #job_max= %4d,  #job_run= %4d, #job_idle= %4d\n",
    $n_node_tot*$n_cpu_per_node,
    $n_node_up*$n_cpu_per_node,
    $ng_rt,
    $n_node_up*$n_cpu_per_node-$ng_rt;

my $date=`date`;
print "$date";

exit();
