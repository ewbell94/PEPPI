#!/usr/bin/perl
#PBS -e !ERRFILE!
#PBS -o !OUTFILE!
#PBS -l !WALLTIME!
#PBS -l !NODE!

use Math::Trig;

########### setup  the environment and Working DIRectory ###
$ENV{'PATH'}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin";
$ENV{'LD_LIBRARY_PATH'}="/usr/local/lib:/usr/lib:/lib";

##### report node -------->
`hostname`=~/(\S+)/;
$node=$1;
printf "hostname: $node\n";
$time=`date`;
printf "starting time: $time";
$pwd=`pwd`;
printf "pwd: $pwd";
#^^^^^^^^^^^^^^^^^^^^^^^^^^

################# directories #############################
$s="!S!";
$o="!O!";
$s1="protein";
$data_dir="!DATA_DIR!/$s";  #for seq.txt
$work_dir="/tmp/!USER!/!TAG!";
$bindir="!BIN_DIR!";
$cont_dir="!CON_DIR!";
$bindir2="$cont_dir/metapsicov2";

################ working directory ########################
`/bin/rm -fr $work_dir`;
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";

################ make fasta sequence file #################
@seqtxts=`cat $data_dir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;
open(seq,">protein.fasta");
printf seq ">protein\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check
    #$log{$i,$seqQ{$i}}++;
    if($i==int($i/60)*60){
	printf seq "\n";
    }
}
printf seq "\n";
close(seq);
########## prepare for modify_gremlin_merged.pl:
open(seq,">seq.txt");
printf seq "$sequence\n";
close(seq);

######### Copy MSA to tmp ############
#$aln="$data_dir/MSA/protein_uniclust_metaclust_tara.aln";
$aln="$data_dir/MSA/!MSA!";
if (-s "$aln"){
    `/bin/cp $aln protein.aln`;
}else{
    printf "error: $aln does not exist!\n";
    exit();
}

########### run meta-psicov2 #######################
printf "\n ----------- run metapsicov2 ------------\n";
######### difference between metapsicov and metapsicov2 ------------------------->
# The MetaPSICOV2 neural network is an incremental development of the prior methodology. 
# The principle change is a move to a slightly deeper and wider first-stage network 
# architecture composed of two hidden layers of 160 ReLU units, compared to a single 
# hidden layer of 55 sigmoid units in the original method. Additionally, wider input 
# window of 15 residues is used, compared to 9 in the CONSIP2 method. The output layer 
# is again softmax, with a cross-entropy loss function and SGD (stochastic gradient 
# descent) training with momentum. The second-stage filtering network remains 
# unchanged from the original method, but now contributes far less to overall 
# prediction accuracy, presumably because the additional hidden layer in the first 
# stage is able to perform much of the required filtering. The input features and
# training data set are unchanged from the original method.
# In our own benchmarking on the original PSICOV test set of 150 large protein domain
# families, MetaPSICOV2 shows a modest improvement, giving a long-range L precision of
# 53% compared to 51% for MetaPSICOV. 
########################################################################################
# codes are about the same to old metapsicov at ~/library/yzhang/contact/metapsicov/run_metapsicov_yz2e
#system("$bindir2/metapsicov-2.0/run_metapsicov protein.fasta");    ## original
#system("$bindir2/run_metapsicov2_gm.pl protein.fasta"); ## changed by Golam, using protein.alin instead of hhblits
system("$bindir/run_metapsicov2_yz_multicpu.pl protein.fasta"); #change psiciv_timeout to 160m
#
## generate protein.colstats && neff based on 0.8 id cut-off ##
printf "\n ----------- calculate neff ----------------\n";
`$bindir/bin/alnstats protein.aln protein.colstats protein.pairstats`;
$neff=`head -3 protein.colstats|tail -1`;
$neff_len=$neff/sqrt($Lch);

############ sort output ----------->
printf "\n ------------ sort output of metapsicov2 -------------->\n";
open(a,"protein.metapsicov.stage2");
$n=0;
while($line=<a>){
    if($line=~/(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/){
        if (($2-$1)>=6){
          $n++;
          $I{$n}=$1;
          $J{$n}=$2;
          $conf{$n}=$5;
        }
    }
}
close(a);

@conf_keys=sort{$conf{$b}<=>$conf{$a}} keys %conf;
open(b,">metapsicov2.dat");
printf b "%3d\t%8.4f\n",$n,$neff_len;
for($i=1;$i<=$n;$i++){
    $k=$conf_keys[$i-1];
    printf b "%5d %5d %8.3f\n",$I{$k},$J{$k},$conf{$k};
}
close(b);

#------------- following is for testing, but not being used ---------->
open(a,"protein.metapsicov.stage3");
$n=0;
while($line=<a>){
    if($line=~/(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/){
        if (($2-$1)>=6){
	    $n++;
	    $I{$n}=$1;
	    $J{$n}=$2;
	    $conf{$n}=$5;
        }
    }
}
close(a);
@conf_keys=sort{$conf{$b}<=>$conf{$a}} keys %conf;
open(b,">metapsicov3.dat"); # not used
printf b "%3d\t%8.4f\n",$n,$neff_len;
for($i=1;$i<=$n;$i++){
    $k=$conf_keys[$i-1];
    printf b "%5d %5d %8.3f\n",$I{$k},$J{$k},$conf{$k};
}
close(b);

############## Copy result back to output ##########
printf "\n------------- copy metapsicov3 back -----------\n";
`/bin/cp metapsicov2.dat $data_dir/metapsicov2.dat`;

## Normalize CCMPRED score --------->
printf "\n---------- rescale ccmpred.dat --------------\n";
`/bin/cp protein.ccmpred ccmpred.dat`;
system("$bindir/bin/modify_gremlin_merged.pl $work_dir ccmpred protein.aln $bindir");
printf "\n---------- copy ccmpred2.dat back -------------\n";
`/bin/cp $work_dir/ccmpred3.dat $data_dir/ccmpred2.dat`;

## Normalize freecontact score --------->
printf "\n---------- rescale freecontact.dat --------------\n";
`/bin/cp protein.evfold freecontact.dat`;
system("$bindir/bin/modify_freecontact.pl $work_dir freecontact protein.aln $bindir");
printf "\n---------- copy freecontact3.dat back -------------\n";
`/bin/cp $work_dir/freecontact2.dat $data_dir/freecontact2.dat`;

#exit();
################# endding procedure ######################

$time=`date`;
printf "ending time: $time";
`sync`;
`sync`;
sleep(1);
`rm -rf $work_dir`;
exit();
