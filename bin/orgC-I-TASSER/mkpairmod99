#!/usr/bin/perl

use Math::Trig;

########### setup  the environment and Working DIRectory ###
$ENV{'PATH'}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin";
$ENV{'LD_LIBRARY_PATH'}="/usr/local/lib:/usr/lib:/lib";

##### report node -------->
`hostname`=~/(\S+)/;
$node=$1;
printf "hostname: $node\n";
$time=`date`;
printf "starting time: $time";
$pwd=`pwd`;
printf "pwd: $pwd";
#^^^^^^^^^^^^^^^^^^^^^^^^^^

$s="!S!";
$inputdir="!INPUTDIR!";
$run="!RUN!";
$bindir="!BINDIR!";
$librarydir="/nfs/amino-library";
################# directories #############################
$work_dir="/tmp/!USER!/!TAG!";
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";
`/bin/rm -f $work_dir/*`;
`cp $librarydir/bin/align ./align`;

############################################################
########### make MSA #######################################
############################################################
# read sequence file ------------------>
@seqtxts=`cat $inputdir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;

# make sequence file ------------------>
open(seq,">protein.seq");
printf seq ">protein\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    if($i==int($i/60)*60){
	printf seq "\n";
    }
}
printf seq "\n";
close(seq);

# make msa.aln file ------------------>
open(msa,">$s.aln");
printf msa "%5d %5d $s\n",1,$Lch;
for($j=1;$j<=$Lch;$j++){
    $a=substr($sequence,$j-1,1);
    printf msa "$a";
    $m=0;
    if($j==int($j/50)*50){
	printf msa "\*\n";
	$m=1;
    }
}
if($m==0){
    printf msa "\n";
}
close(msa);

###########################################################
######### create pair3.dat ################################
###########################################################
### decided library list -------------------------------->
printf "removing homology templates >35% id ...........\n";
if("!RUN!" eq "real"){
    `/bin/cp $librarydir/PDB/list ./list`;
}else{
    open(listall,"$librarydir/PDB/list");
    <listall>=~/(\d+)/;
    $n=$1; #total number of templates
    $k=0;
    for($i=1;$i<=$n;$i++){
	<listall>=~/(\S+)/;
	$p=$1;
	$ali=`./align protein.seq $librarydir/PDB/$p\.pdb 2`;
	$ali=~/Identical length\:\s*(\d+)/;
	$L_id=$1;
	$id=$L_id/$Lch;
	#printf "$p $id $i\n";
	if($id<0.3){
	    #printf "$p $id $k ---------------\n";
	    $k++;
	    $pp{$k}=$p;
	}
    }
    close(listall);
    $K=$k;
    open(list,">list");
    printf list "$K\n";
    for($i=1;$i<=$K;$i++){
	printf list "$pp{$i}\n";
    }
    close(list);
}

# copy input files for pair3----------------------------->
`/bin/cp -f $librarydir/data/matrix1.comm .`;
`/bin/cp -f $librarydir/data/matrix3.comm .`;
`/bin/cp -f $librarydir/data/blosum.comm  .`;

`/bin/cp -f $bindir/pair99 ./pair`;
 pos50:;
if(!-s "$inputdir/seq.dat"){
    sleep(60);
    goto pos50;
}
`/bin/cp -f $inputdir/seq.dat .`; 
sleep(2);

open(tmp,">LIST.target");
print tmp "1\n";
print tmp "$s\n";
close(tmp);
open(tmp,">$s\.homol");
print tmp "0\n";
close(tmp);

# run pair ------------------------------------------->
#$asim=0.3;
#$asim=0.25 if($type eq "hard");
printf "Running pair ................\n";
`./pair $librarydir/`;
`sync`;  #flush filesystem buffers
sleep(1);

# copy back the output files -------------------------->
`/bin/cp -f pair.3  $inputdir/pair3.dat`;
`/bin/cp -f pair.1  $inputdir/pair1.dat`;

################# endding procedure ######################
$time=`date`;
printf "ending time: $time";
`sync`;
`sync`;
sleep(1);
`rm -fr $work_dir`;

exit();
