#!/usr/bin/perl
use Math::Trig;

#blast at /library/yzhang/FFAS/blast
#nr at    /library/yzhang/FFAS/blast/db
#pdb at   /library/yzhang/PDB

$home="/nfs/amino-home/zhng";
$lib="/nfs/amino-library";

########### setup  the environment and Working DIRectory ###
$ENV{'PATH'}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin:$lib/FFAS/soft";
$ENV{'FFAS'}="$lib/FFAS";
############### FFAS ############################

##### report node -------->
`hostname`=~/(\S+)/;
$node=$1;
printf "hostname: $node\n";
$time=`date`;
printf "starting time: $time";
$pwd=`pwd`;
printf "pwd: $pwd";
#^^^^^^^^^^^^^^^^^^^^^^^^^^
%ts=(
     'GLY'=>'G',
     'ALA'=>'A',
     'VAL'=>'V',
     'LEU'=>'L',
     'ILE'=>'I',
     'SER'=>'S',
     'THR'=>'T',
     'CYS'=>'C',
     'MET'=>'M',
     'PRO'=>'P',
     'ASP'=>'D',
     'ASN'=>'N',
     'GLU'=>'E',
     'GLN'=>'Q',
     'LYS'=>'K',
     'ARG'=>'R',
     'HIS'=>'H',
     'PHE'=>'F',
     'TYR'=>'Y',
     'TRP'=>'W',
     'ASX'=>'B',
     'GLX'=>'Z',
     'UNK'=>'X',
     'G'=>'GLY',
     'A'=>'ALA',
     'V'=>'VAL',
     'L'=>'LEU',
     'I'=>'ILE',
     'S'=>'SER',
     'T'=>'THR',
     'C'=>'CYS',
     'M'=>'MET',
     'P'=>'PRO',
     'D'=>'ASP',
     'N'=>'ASN',
     'E'=>'GLU',
     'Q'=>'GLN',
     'K'=>'LYS',
     'R'=>'ARG',
     'H'=>'HIS',
     'F'=>'PHE',
     'Y'=>'TYR',
     'W'=>'TRP',
     'a'=>'CYS',
     'b'=>'CYS',
     'c'=>'CYS',
     'd'=>'CYS',
     'e'=>'CYS',
     'f'=>'CYS',
     'g'=>'CYS',
     'h'=>'CYS',
     'i'=>'CYS',
     'j'=>'CYS',
     'k'=>'CYS',
     'l'=>'CYS',
     'm'=>'CYS',
     'n'=>'CYS',
     'o'=>'CYS',
     'p'=>'CYS',
     'q'=>'CYS',
     'r'=>'CYS',
     's'=>'CYS',
     't'=>'CYS',
     'u'=>'CYS',
     'v'=>'CYS',
     'w'=>'CYS',
     'x'=>'CYS',
     'y'=>'CYS',
     'z'=>'CYS',
     'B'=>'ASX',
     'Z'=>'GLX',
     'X'=>'CYS',
    );
@AA=qw(
       C
       M
       F
       I
       L
       V
       W
       Y
       A
       G
       T
       S
       Q
       N
       E
       D
       H
       R
       K
       P
       );
################# directories #############################
$data_dir="!DATA_DIR!/!S!";  #for seq.txt and init.dat
$tag="!TAG!";
$usrname="!USER!";
$libdir="!LIB_DIR!";
$o="!O!";
$idcut0=!ID_CUT!;
$ntemp="!N_TEMP!";
$libdir_local="$lib";
 
$work_dir="/tmp/$usrname/$tag";
################ working directory ########################
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";
`/bin/rm -f $work_dir/*`;
`cp $libdir_local/bin/align ./align`;
 
################ make fasta sequence file #################
@seqtxts=`cat $data_dir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;
open(seq,">protein.seq");
printf seq ">protein $Lch\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check
    if($i==int($i/60)*60){
	printf seq "\n";
    }
}
printf seq "\n";
close(seq);
########### run FFAS #######################
printf "running FFAS .....\n";
`cp $lib/FFAS/soft/blast1.pl .`; #run blast+
`cp $libdir/FFAS/soft/blast.pl .`;
`cp $libdir/FFAS/soft/profil .`;
`cp $libdir/FFAS/soft/ffas-new .`;
`cp $libdir/FFAS/soft/alignres2init .`;

`./blast1.pl  protein.seq | tee mu | profil > ff`;
`./ffas-new -b ff $libdir/FFAS/db/PDB0610fb > pdb.re`;               ### search against the PDB0610fb using the generated profile

###########################################################
##### create template file 'init.dat' #####################
###########################################################
#### exclude PDB ####
my @exclude_pdb_list=();
if (-s "$data_dir/exclude_pdb_list" )
{
    system("cp $data_dir/exclude_pdb_list $work_dir/exclude_pdb_list");
    foreach my $line(`cat $work_dir/exclude_pdb_list`)
    {
        push(@exclude_pdb_list,substr($line,0,4));
    }
}

$check=-1;  ## this variable used to indicate the start line of a new query-template alignment
$count=0;   ## this variable used to indicate which line is query sequence and template sequence
$it=0;
open(init,">init.ffas");
open(FFASIN,"pdb.re")||die "can not open";
while($line=<FFASIN>){
    chomp($line);
    if($line=~/^>\s+/)               ### This line contain the template information 
    {
	@wds=split(/\s+/,$line); ### FFAS scores lower than -9.5 are expected to contain less than 3% of false positives 
	$score=-$wds[1];         ### prediction score by FFAS,
	if($line=~/>>(\w+)\s+/)  ### read the template name from this part
	{	
	    $template_name=$1;
	    $check=1;
	}
	else
	{
	    print "can not get the template name\n";
	}
    }
    
    if(1==$check)   ### let 1 in the left would be a better way to avoid error spelling like $check=1
    {
	if($line=~/^\s+(\d+)\s+/)
	{
	    $line=~s/^\s+//g;
	    @wds = split(/\s+/,$line);
	    $count++;
	    if(1==$count)     ### query aln information
	    {
		$start_q_pos = $wds[0];   ### query sequence start position,(local-local alignment)
		$sequenceQ = $wds[1];     ### query sequence in the alignment
	    }	
	    elsif(2==$count)  ### template aln information
	    {
		$start_t_pos = $wds[0];   ### template sequence start position
		$sequenceT  = $wds[1];	  ### template sequence in the alignment					
		
		$check = -1; ### set the check value to it initial for next new alignment
		$count = 0;
		
		if(-e "$lib/PDB/$template_name\.pdb")  ### from local node
		{
		    `cp $lib/PDB/$template_name\.pdb ./temp.pdb`;
		}
		else ### from head node
		{
		    `cp $home/PDBall/$template_name\.pdb ./temp.pdb`;
		}
                
                if (scalar @exclude_pdb_list)
                {
                    $template_pdb_ID=substr($template_name,0,4);
                    foreach $exclude_pdb_ID (@exclude_pdb_list)
                    {
                        goto PPP if($template_pdb_ID eq $exclude_pdb_ID);
                    }
                }
		if($idcut0<0.999)
		{
		    $align_rst=`./align protein.seq temp.pdb 2`;
		    if($align_rst=~/Identical length\:\s+(\d+)/)
		    {
			$id=$1/$Lch;
			if($id>=$idcut0)
			{
			    goto PPP;
			}
		    }
		}						
		$it++;
		
		FFAS_model($start_t_pos,$sequenceT,$start_q_pos,$sequenceQ,$template_name,$score);
		if($it>($ntemp-1)) ### more than 20 templates
		{
		    goto it_pos_end;
		}
	      PPP:;			
		
	    }	
	} 
    }
}	
it_pos_end:;
close FFASIN || die "can not close FFASIN";
close init || die "can not close init file";
open(init1,">init1.dat");
printf init1 "%5d %5d (N_temp, Lch)\n",$it,$Lch;
close(init1);
`cat init.ffas >> init1.dat`;
`cp  init1.dat $data_dir/init$o\.RRR3`;

################# endding procedure ######################
$time=`date`;
printf "ending time: $time";
`sync`;
`sync`;
sleep(1);
`rm -fr $work_dir`;
exit();

##################################  
sub FFAS_model
{
	$start_t_pos = $_[0];
	$sequenceT   = $_[1];
	$start_q_pos = $_[2];
	$sequenceQ   = $_[3];
	$template_name= $_[4]; 
	$score        = $_[5];
	$sequenceT=~s/\*//mg;
    	$sequenceQ=~s/\*//mg;
    	$sequenceT=~s/\s+//g;
    	$sequenceQ=~s/\s+//g; 
	
	####### get sequence identity of the alignment ------>
	$L=length $sequenceQ;
	    $L_eq=0;  #number of identical residues
	    $L_ali=0; #number of aligned residues
	    for($j=1;$j<=$L;$j++){
		$sQ=substr($sequenceQ,$j-1,1);
		$sT=substr($sequenceT,$j-1,1);
		if($sQ ne "-" && $sT ne "-"){
		    $L_ali++;
		    if($sQ eq $sT){
			$L_eq++;
		    }
		}
	    }
	$seq_id=$L_eq/($L_ali+.0000001); #seq idendity betwen target & template
	open(temppdb,"temp.pdb");
    	$n=0;
    	while($line=<temppdb>)
    	{
		$ATOM=substr($line,0,4);
		$atom=substr($line,12,4);
		$atom=~s/\s//mg;
		if( $ATOM eq "ATOM" && $atom eq "CA")
		{
		    $n++;
		    $seqT{$n}=$ts{substr($line,17,3)}; #only for check
		    $numT{$n}=substr($line,22,4);
		    $x{$n}=substr($line,30,8);
		    $y{$n}=substr($line,38,8);
		    $z{$n}=substr($line,46,8);
		}
    	}
    	close(temppdb);
    
    	########## write alignment to 'init.dat' ------------------>
    	$a=substr($template_name,0,4);
    	if(length $template_name == 4)
    	{
		$b="_";
    	}
    	else
    	{
		$b=substr($template_name,4,1);
		$b=~tr/a-z/A-Z/;
    	}
    	
	$temp_name="$a$b";
	$template_name=~s/\\\./\./mg;
	$zscore_value=1;
	printf init "%5d %8.3f %5d   %6s %8.3f %8.3f(=$L_ali/$Lch) (L_ali,Z,i,pdb,id,cov)\n",	
	$L_ali,$score,$it,$template_name,$seq_id,$L_ali/$Lch;
	
	$iQ=0;
	$iT=0;
	for($j=1;$j<=length($sequenceQ);$j++)        
	{
		$sQ=substr($sequenceQ,$j-1,1);
		$sT=substr($sequenceT,$j-1,1);
		
		if($sQ eq "-")
		{
		    $iT++;
		}
		
		if($sT eq "-")
		{
		    $iQ++;
		}
		
		if($sQ ne "-" && $sT ne "-")
		{
		
		    $iQ++;
		    $iT++;
		    
		    printf init "ATOM  %5s  CA  %3s  %4d    %8.3f%8.3f%8.3f%5s %3s\n",
		    $iQ+$it*1000,$ts{$sQ},$iQ+$start_q_pos-1,$x{$iT+$start_t_pos-1},$y{$iT+$start_t_pos-1},$z{$iT+$start_t_pos-1},$numT{$iT+$start_t_pos-1},$ts{$sT};
		    
		    if($sQ ne $seqQ{$iQ+$start_q_pos-1} || $sT ne $seqT{$iT+$start_t_pos-1})
		    {
		    	print "$temp_name : $iQ - $sQ = $seqQ{$iQ+$start_q_pos-1} <> $iT - $sT = $seqT{$iT+$start_t_pos-1}\n";
		    }
		    
		}
	 }
	 printf init "TER\n";
	
end_pos:;
	
}

