#!/usr/bin/perl

$libdir="!LIB_DIR!"; #blast library is always in /library/yzhang, see genfreq
########### setup  the environment and Working DIRectory ###
$ENV{'PATH'}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin:$libdir/bin/sparks";
$ENV{'LD_LIBRARY_PATH'}="/usr/local/lib:/usr/lib:/lib";
############ for SPARKS #######################
$ENV{'sparks'}="$libdir/bin/sparks";
$ENV{'libdir'}="$libdir";

############### VVV #########################
# 1, The pdb library is at/library/yzhang/SP3
#############################################

################# directories #############################
$s="!S!";
$o="!O!";
$data_dir="!DATA_DIR!/!S!";  #for seq.txt and init.dat
$work_dir="/tmp/!USER!/!TAG!";
$idcut0=!ID_CUT!;
$sparks_dir="$libdir/bin/sparks";
$template_dir="$libdir/SP3";

%ts=(
     'GLY'=>'G',
     'ALA'=>'A',
     'VAL'=>'V',
     'LEU'=>'L',
     'ILE'=>'I',
     'SER'=>'S',
     'THR'=>'T',
     'CYS'=>'C',
     'MET'=>'M',
     'PRO'=>'P',
     'ASP'=>'D',
     'ASN'=>'N',
     'GLU'=>'E',
     'GLN'=>'Q',
     'LYS'=>'K',
     'ARG'=>'R',
     'HIS'=>'H',
     'PHE'=>'F',
     'TYR'=>'Y',
     'TRP'=>'W',
     'G'=>'GLY',
     'A'=>'ALA',
     'V'=>'VAL',
     'L'=>'LEU',
     'I'=>'ILE',
     'S'=>'SER',
     'T'=>'THR',
     'C'=>'CYS',
     'M'=>'MET',
     'P'=>'PRO',
     'D'=>'ASP',
     'N'=>'ASN',
     'E'=>'GLU',
     'Q'=>'GLN',
     'K'=>'LYS',
     'R'=>'ARG',
     'H'=>'HIS',
     'F'=>'PHE',
     'Y'=>'TYR',
     'W'=>'TRP',
     'a'=>'CYS',
     'b'=>'CYS',
     'c'=>'CYS',
     'd'=>'CYS',
     'e'=>'CYS',
     'f'=>'CYS',
     'g'=>'CYS',
     'h'=>'CYS',
     'i'=>'CYS',
     'j'=>'CYS',
     'k'=>'CYS',
     'l'=>'CYS',
     'm'=>'CYS',
     'n'=>'CYS',
     'o'=>'CYS',
     'p'=>'CYS',
     'q'=>'CYS',
     'r'=>'CYS',
     's'=>'CYS',
     't'=>'CYS',
     'u'=>'CYS',
     'v'=>'CYS',
     'w'=>'CYS',
     'x'=>'CYS',
     'y'=>'CYS',
     'z'=>'CYS',
     'X'=>'GLY',
    );

################ working directory ########################
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";
`/bin/rm -f $work_dir/*`;
`cp $libdir/bin/align ./align`;

################ make fasta sequence file #################
@seqtxts=`cat $data_dir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    if($seqtxt!~/\>/){
	$seqtxt=~s/\s//mg;
	$seqtxt=~s/\n//mg;
	$sequence=$sequence.$seqtxt;
    }
}
$Lch=length $sequence;
open(seq,">protein.seq");
printf seq ">protein\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check
    if($i==int($i/70)*70){
	printf seq "\n";
    }
}
printf seq "\n";
close(seq);

################ run sp3 #############################
#system("$sparks_dir/scan_sp3.job protein.seq");
system("$sparks_dir/scan_sp3_new.job protein.seq");

################ calculate Z-score ######################
open(out,"protein_sp3.out");
$i=0;
while($line=<out>){
    if($line=~/(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/){
	$i++;
	$p{$i}=$3;
	$v7{$i}=$7;
	$v7_a+=$v7{$i};
	$v7_a2+=$v7{$i}**2;
	$v12{$i}=$12;
	$v12_a+=$v12{$i};
	$v12_a2+=$v12{$i}**2;
	$v14{$i}=$14;
      	$v14_a+=$v14{$i};
	$v14_a2+=$v14{$i}**2;
    }
}
close(out);
$counter=$i;
$N_hit=$i;

@v7_keys=sort{$v7{$a}<=>$v7{$b}} keys %v7;
@v12_keys=sort{$v12{$a}<=>$v12{$b}} keys %v12;
@v14_keys=sort{$v14{$a}<=>$v14{$b}} keys %v14;

$mean7=($v7_a-$v7{$v7_keys[0]})/($counter-1);
$std7=sqrt( ($v7_a2-$v7{$v7_keys[0]}**2)/($counter-1)-$mean7**2);
$first7=($mean7-$v7{$v7_keys[0]})/$std7;
$mean12=($v12_a-$v12{$v12_keys[0]})/($counter-1);
$std12=sqrt( ($v12_a2-$v12{$v12_keys[0]}**2)/($counter-1)-$mean12**2);
$first12=($mean12-$v12{$v12_keys[0]})/$std12;

#######################################################
#select 7th or 12th column
#######################################################
if($first7 > $first12){
    $index=7;
}else{
    $index=12;
}
#######################################################
#get the CA file of first two pdbs from 14th column
########################################################
for($k=0;$k<2;$k++){
    $pname=$p{$v14_keys[$k]};
    
    open(fl,"protein_sp3_align.dat");
    open(wfl,">my$k.ali");
    while($line=<fl>){
	$line=~/>P1;(\S+)/;
	if($1 eq "$pname"){
	    print wfl "$line";
	    $c=0;
	    while($line2=<fl>){
		print wfl "$line2";
		$len=length($line2);
		$str=substr($line2,$len-2,1);            
		if($str eq "*"){
		    $c++;
		}
		goto pos1111 if($c==2);
	    }
	    
	}
    }
  pos1111:;
    close(fl);
    close(wfl);
    `cp -f $template_dir/$pname.pdb .`;
    `$sparks_dir/extca < my$k.ali > my$k.CA`;
}
$rst=`$sparks_dir/main_maxsub my0.CA my1.CA 3.5`;
$rst=~/MAXSUB:\s+(\S+)/;
$score=$1;

if($score>0.01){
    $column=14;
}else{
    if($index==7){
	$column=7;
    }else{
	$column=12;
    }
}

################ calculate Z-score ######################
if($column==7){
    $mu=$v7_a/$N_hit;
    $sigma=sqrt( $v7_a2/$N_hit-$mu**2);    
    for($i=1;$i<=$N_hit;$i++){
	$zscore{$p{$i}}=($mu-$v7{$i})/$sigma;
    }
}elsif($column==12){
    $mu=$v12_a/$N_hit;
    $sigma=sqrt( $v12_a2/$N_hit-$mu**2);    
    for($i=1;$i<=$N_hit;$i++){
	$zscore{$p{$i}}=($mu-$v12{$i})/$sigma;
    }
}elsif($column==14){
    $mu=$v14_a/$N_hit;
    $sigma=sqrt( $v14_a2/$N_hit-$mu**2); 
    for($i=1;$i<=$N_hit;$i++){
	$zscore{$p{$i}}=($mu-$v14{$i})/$sigma;
    }   
}
@zscore_keys=sort{$zscore{$b}<=>$zscore{$a}} keys %zscore;

###########################################################
##### create template file 'init.dat' #####################
###########################################################
#### exclude PDB ####
my @exclude_pdb_list=();
if (-s "$data_dir/exclude_pdb_list" )
{
    system("cp $data_dir/exclude_pdb_list $work_dir/exclude_pdb_list");
    foreach my $line(`cat $work_dir/exclude_pdb_list`)
    {
        push(@exclude_pdb_list,substr($line,0,4));
    }
}

open(init,">init.dat");

$i_t=0;
for($i=1;$i<=$N_hit;$i++){
    $template_name=$zscore_keys[$i-1];
    $template_name=~s/\./\\\./mg;  #useful for match
    $zscore_value=$zscore{$zscore_keys[$i-1]};
    ######## read the alignment -------->
    open(align,"protein_sp3_align.dat");
    while($line=<align>){
	if($line=~/structureX:$template_name\s*\:/){
	    $sequenceT="";         #template sequence
	    while($line1=<align>){
		goto pos5 if($line1=~/\>P1/);
		$line1=~/(\S+)/;
		$sequenceT=$sequenceT.$1;
	    }
	  pos5:;
	    <align>;
	    $sequenceQ="";         #query sequence
	    while($line1=<align>){
		if($line1=~/(\S+)/){
		    $sequenceQ=$sequenceQ.$1;
		}else{
		    goto pos1;
		}
	    }
	}
    }
  pos1:;
    close(align);
    $sequenceT=~s/\*//mg;
    $sequenceQ=~s/\*//mg;
    ####### get sequence identity of the alignment ------>
    $L=length $sequenceQ;
    $L_eq=0;  #number of identical residues
    $L_ali=0; #number of aligned residues
    for($j=1;$j<=$L;$j++){
	$sQ=substr($sequenceQ,$j-1,1);
	$sT=substr($sequenceT,$j-1,1);
	if($sQ ne "-" && $sT ne "-"){
	    $L_ali++;
	    if($sQ eq $sT){
		$L_eq++;
	    }
	}
    }
    $seq_id=$L_eq/($L_ali+.0000001); #seq idendity betwen target & template
    
    ####### read template conformation #################
    if (scalar @exclude_pdb_list)
    {
        $template_pdb_ID=substr($template_name,0,4);
        foreach $exclude_pdb_ID (@exclude_pdb_list)
        {
            goto pos2 if($template_pdb_ID eq $exclude_pdb_ID);
        }
    }

    `/bin/cp -f $template_dir/$template_name\.pdb ./temp.pdb`;
    if($idcut0<0.999){
	$align_rst=`./align protein.seq temp.pdb 2`;
	if($align_rst=~/Identical length\:\s+(\d+)/){
	    $id=$1/$Lch;
	    goto pos2 if($id>=$idcut0);
	}
    }
    $i_t++;

    open(temppdb,"temp.pdb");
    $n=0;
    while($line=<temppdb>){
	$ATOM=substr($line,0,4);
	$atom=substr($line,12,4);
	$atom=~s/\s//mg;
	if( $ATOM eq "ATOM" && $atom eq "CA"){
	    $n++;
	    $seqT{$n}=$ts{substr($line,17,3)}; #only for check
	      $numT{$n}=substr($line,22,4);
	    $x{$n}=substr($line,30,8);
	    $y{$n}=substr($line,38,8);
	    $z{$n}=substr($line,46,8);
	}
    }
    close(temppdb);

    ########## write alignment to 'init.dat' ------------------>
    $a=substr($template_name,0,4);
    if(length $template_name == 4){
	$b="_";
    }else{
	$b=substr($template_name,4,1);
	$b=~tr/a-z/A-Z/;
    }
    $temp_name="$a$b";
    printf init "%5d %8.3f %5d   %6s %8.3f %8.3f(=$L_ali/$Lch) (L_ali,Z,i,pdb,id,cov)\n",
    $L_ali,$zscore_value,$i_t,$template_name,$seq_id,$L_ali/$Lch;
    $iQ=0;
    $iT=0;
    for($j=1;$j<=$L;$j++){
	$sQ=substr($sequenceQ,$j-1,1);
	$sT=substr($sequenceT,$j-1,1);
	if($sQ eq "-"){
	    $iT++;
	}
	if($sT eq "-"){
	    $iQ++;
	}
	if($sQ ne "-" && $sT ne "-"){
	    $iQ++;
	    $iT++;
	    printf init "ATOM  %5s  CA  %3s  %4d    %8.3f%8.3f%8.3f%5s %3s\n",
	    $iQ+$i_t*1000,$ts{$sQ},$iQ,$x{$iT},$y{$iT},$z{$iT},$numT{$iT},$ts{$sT};
	    if($sQ ne $seqQ{$iQ} || $sT ne $seqT{$iT}){
		print ware "$temp_name: $iQ - $sQ = $seqQ{$iQ} <> $iT - $sT = $seqT{$iT}\n";
	    }
	}
    }
    printf init "TER\n";
    goto pos3 if($i_t >= !N_TEMP!);
  pos2:;
}
 pos3:;
close(init);

open(init1,">init1.dat");
printf init1 "%5d %5d (N_temp, Lch)\n",$i_t,$Lch;
close(init1);
`cat init.dat >> init1.dat`;

`/bin/cp init1.dat            $data_dir/init!O!.VVV`;

################# endding procedure ######################
$time=`date`;
printf "ending time: $time";
`sync`;
`sync`;
sleep(1);
`rm -fr $work_dir`;

exit();
