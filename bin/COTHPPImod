#!/usr/bin/env perl

use strict;
use warnings;

my $peppidir="!PEPPIDIR!";
my $outdir="!OUTDIR!/PPI";
my $pairname="!PAIRNAME!";
my $benchmarkflag=!BENCHMARK!;

print `mkdir -p $outdir/$pairname/COTHPPI`;

#User-set parameters
my $bindir="/nfs/amino-home/ewbell/SPRING-PPI/COTH"; #location of program binaries
my $springout="$outdir/$pairname/COTHPPI"; #location of program output
my $scut=($benchmarkflag) ? 0.3 : 1.1; #monomeric sequence homology cutoffs for threading; 0.3="benchmark", 1.1="real"
my $hhdir="$outdir/../hhr"; #location of hhr files of previously run HHsearch results

#DO NOT CHANGE BENEATH THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING
#Processed parameters
my $user=`whoami`;
chomp($user);

if (-e "$springout/res.txt"){
    print "SPRING has already been run!\n";
    exit(2);
}

my @chains=split("-",$pairname);
print `$bindir/coth.py -q $pairname -iDir $outdir -oDir $springout -scut $scut` if (! -e "$springout/COTH/run1.dat");

open(my $resfile,">","$springout/res.txt");

if (! -e "$springout/COTH/run1.dat"){
    print "run1.dat not found.\n";
    print $resfile "?\n";
    exit(2);
}

my @templates=();
my @compscores=();
my @recscores=();
my @ligscores=();

open(my $summary,"<","$springout/COTH/run1.dat");
while (my $line=<$summary>){
    last if ($line=~/---/);
    my @parts=split(" ",$line);
    push(@templates,"AB:$parts[1]");
    push(@compscores,$parts[2]);
    push(@recscores,$parts[3]);
    push(@ligscores,$parts[4]);
}
close($summary);

if (-e "$springout/COTH/run2.dat"){
    open(my $summary,"<","$springout/COTH/run2.dat");
    while (my $line=<$summary>){
	last if ($line=~/---/);
	my @parts=split(" ",$line);
	push(@templates,"BA:$parts[1]");
	push(@compscores,$parts[2]);
	push(@recscores,$parts[3]);
	push(@ligscores,$parts[4]);
    }
    close($summary);
}

@compscores=makeZ(\@compscores);
@recscores=makeZ(\@recscores);
@ligscores=makeZ(\@ligscores);

my @tempscores=();

for my $i (0..scalar(@templates)-1){
    my @combined=($templates[$i],($compscores[$i]+$recscores[$i]+$ligscores[$i])/3,$compscores[$i],$recscores[$i],$ligscores[$i]);
    push(@tempscores,\@combined);
}

@tempscores=sort{$b->[1]<=>$a->[1]} @tempscores;
print $resfile "$tempscores[0][1]\n";
close($resfile);

open(my $templatef,">","$springout/TopTemplates.txt");
for my $i (0..100){
    print $templatef "$tempscores[$i][0]\t$tempscores[$i][1]\t$tempscores[$i][2]\t$tempscores[$i][3]\t$tempscores[$i][4]\n";
}
close($templatef);

sub makeZ{
    my @scores=@{$_[0]};
    my $mean=0;
    my $n=scalar(@scores);
    for my $s (@scores){
	$mean+=$s;
    }
    $mean/=$n;
    
    my $sd=0;
    for my $s (@scores){
	$sd+=($s-$mean)**2;
    }
    $sd=($sd/($n-1))**0.5;
    
    my @z=();
    for my $s (@scores){
	push(@z,($s-$mean)/$sd);
    }

    return @z;
}
