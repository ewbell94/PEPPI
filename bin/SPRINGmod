#!/usr/bin/env perl

use strict;
use warnings;
use Scalar::Util qw(looks_like_number);
use List::Util qw(min);
use POSIX qw(floor);
use Time::HiRes qw(time);

my $peppidir="!PEPPIDIR!";
my $outdir="!OUTDIR!/PPI";
my $pairname="!PAIRNAME!";
my $benchmarkflag=!BENCHMARK!;
my $starttime=time();

print `mkdir -p $outdir/$pairname/SPRING`;

#User-set parameters
my $bindir="$peppidir/bin"; #location of program binaries
my $springout="$outdir/$pairname/SPRING"; #location of program output
<<<<<<< HEAD
my $dbdir="/expanse/projects/itasser/ewbell/SPRINGDB"; #location of SPRING database
my $complexlist="$dbdir/70CDHITstruct.txt";
=======
my $dbdir="/nfs/amino-home/ewbell/SPRINGDB"; #location of SPRING database
my $complexlist="$dbdir/70CDHITstruct.txt"; #location of pairs in the database
>>>>>>> master
my $maxmodels=1; #maximum number of model pdb files to make
my $scut=($benchmarkflag) ? 0.5 : 1.1; #monomeric sequence homology cutoffs for threading; 0.5="benchmark", 1.1="real"

#DO NOT CHANGE BENEATH THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING
#Processed parameters
my $user=`whoami`;
chomp($user);
my @weights=(1,5.7,-0.4); #weights for SPRING score calculation
my @scorerange=(2.0,93.0);
my $dimercount=10; #number of dimers to be assembled
my $topcount=$dimercount;
my $topscore=-100.0;

if (-e "$springout/res.txt"){
    print "SPRING has already been run!\n";
    exit(2);
}

my @qseqs=split("-",$pairname);
my @domainPairs=();
my $m=1;
while (-e "$outdir/../mono/$qseqs[0]/$qseqs[0]\_$m.fasta"){
    my $n=1;
    while (-e "$outdir/../mono/$qseqs[1]/$qseqs[1]\_$n.fasta"){
	my @domainPair=("$qseqs[0]\_$m","$qseqs[1]\_$n");
	push(@domainPairs,\@domainPair);
	$n++;
    }
    $m++;
}

my $randomTag=int(rand(1000000));
my $jobid=`head -1 $outdir/$pairname/jobid.txt`;
chomp($jobid);
my $tempdir="/scratch/$user/job_$jobid/PEPPI_SPRING_$qseqs[0]-$qseqs[1]\_$randomTag";
if (! -e "$tempdir"){
    print `mkdir -p $tempdir`;
} else {
    print `rm -rf $tempdir/*`;
}
chdir("$tempdir");

for my $pointer (@domainPairs){
    my $t0=time();
    my @qdoms = @{$pointer};
    my $prot1file="$outdir/../mono/$qseqs[0]/$qdoms[0].fasta";
    my $prot2file="$outdir/../mono/$qseqs[1]/$qdoms[1].fasta";
    my $prot1=$qdoms[0];
    my $prot2=$qdoms[1];

    my $outputdir="$springout/$qdoms[0]-$qdoms[1]";
    print `mkdir -p $outputdir`;
    if (! -e "$prot1file" || ! -e "$prot2file"){
	print "Protein sequence files were not found!\n";
	next;
    }

    print `cp $prot1file $tempdir/$prot1.fasta`;
    print `cp $prot2file $tempdir/$prot2.fasta`;
    
    print "Running HHsearch\n";
    if (-e "$outdir/../mono/$qseqs[0]/$prot1.hhr.gz"){
	print `cp $outdir/../mono/$qseqs[0]/$prot1.hhr.gz $tempdir`;
	print `gzip -f -d $tempdir/$prot1.hhr.gz`;
    } else {
	print "$prot1 does not have an HHR file, run makeHHR on this target\n";
	exit(4);
    }
    if (-e "$outdir/../mono/$qseqs[1]/$prot2.hhr.gz"){
	print `cp $outdir/../mono/$qseqs[1]/$prot2.hhr.gz $tempdir`;
	print `gzip -f -d $tempdir/$prot2.hhr.gz`;
    } else {
	print "$prot2 does not have an HHR file, run makeHHR on this target\n";
	exit(4);
    }

    my $t1=time();
    print "Total HHsearch time: ".($t1-$t0)."\n";

    print "Fetching HHsearch hits\n";
    print `$bindir/dimMap $tempdir/$prot1.hhr $tempdir/$prot2.hhr $complexlist`;
    
    open(my $mapres,"<","$tempdir/dimers.txt");
    my @dimerTemplates=();

    while(my $line=<$mapres>){
	chomp($line);
	my @dimer=split(" ",$line);
	next if ($benchmarkflag && (getSeqID("$tempdir/$prot1.fasta","$dbdir/monomers/$dimer[0].pdb") >= $scut || getSeqID("$tempdir/$prot2.fasta","$dbdir/monomers/$dimer[1].pdb") >= $scut));
	push(@dimerTemplates,\@dimer);
    }
    close($mapres);

    open(my $prot1topf,"<","$tempdir/prot1top.txt");
    my $prot1top;
    while(my $line=<$prot1topf>){
	chomp($line);
	if ($benchmarkflag){
	    if (getSeqID("$tempdir/$prot1.fasta","$dbdir/monomers/$line.pdb") < $scut){
		$prot1top=$line;
		last;
	    }
	} else {
	    $prot1top=$line;
	    last;
	}
    }
    close($prot1topf);

    open(my $prot2topf,"<","$tempdir/prot2top.txt");
    my $prot2top;
    while(my $line=<$prot2topf>){
	chomp($line);
	if ($benchmarkflag){
	    if (getSeqID("$tempdir/$prot2.fasta","$dbdir/monomers/$line.pdb") < $scut){
		$prot2top=$line;
		last;
	    }
	} else {
	    $prot2top=$line;
	    last;
	}
    }
    close($prot2topf);
    
    #Create and score models from selected dimer templates
    my $t2=time();
    print "Total mapping time: ".($t2-$t1)."\n";
    print "Constructing models\n";
    
    constructMonomer($prot1,$prot1top);
    constructMonomer($prot2,$prot2top);
    
    my $t3=time();
    print "Total monomer model time: ".($t3-$t2)."\n";

    my $hhr1head=`head $tempdir/$prot1.hhr`;
    $hhr1head=~/Match_columns\s+(\d+)/;
    my $seq1len=$1;
    my $hhr2head=`head $tempdir/$prot2.hhr`;
    $hhr2head=~/Match_columns\s+(\d+)/;
    my $seq2len=$1;
    
    if (scalar(@dimerTemplates)==0){
	print "No dimer templates found!\n";
	exit(0);
    }

    my @dimerModels=();
    for my $i (0..min(scalar(@dimerTemplates)-1,$dimercount-1)){
	print "$dimerTemplates[$i][0]-$dimerTemplates[$i][1]\n";
	my @scores=constructModel($prot1,$prot2,$dimerTemplates[$i][0],$dimerTemplates[$i][1],$dimerTemplates[$i][2],$seq1len,$seq2len);
	my @model=($dimerTemplates[$i][0],$dimerTemplates[$i][1],\@scores);
	push(@dimerModels,\@model);
    }
    
    @dimerModels=sort{$b->[2][0]<=>$a->[2][0]} @dimerModels;
    
    my $domainscore=$dimerModels[0][2][0];
    $topscore=$domainscore if ($domainscore>$topscore);

    print "Writing output\n";
    open(my $summary,">","$outputdir/TemplateSummary.txt");
    for my $i (0..min(scalar(@dimerModels)-1,$topcount-1)){
	(my $dimer1name=$dimerModels[$i][0])=~s/\//_/g;
	(my $dimer2name=$dimerModels[$i][1])=~s/\//_/g;
	print `cp $tempdir/$dimer1name-$dimer2name.pdb $outputdir/model$i.pdb` if ($i < $maxmodels);
	print $summary sprintf("%s\t%s\t%.3f\t%.3f\t%.3f\t%.3f\n",$dimerModels[$i][0],$dimerModels[$i][1],$dimerModels[$i][2][0],$dimerModels[$i][2][1],$dimerModels[$i][2][2],$dimerModels[$i][2][3]);
    }
    close($summary);

    my $t4=time();
    print "Total scoring time: ".($t4-$t3)."\n";
    print `sync`;
    print `rm -rf $tempdir/*`;
}

print `rm -rf $tempdir`;
if ($topscore!=-100.0){
    if ($topscore < $scorerange[0]){
	print "Best SPRINGscore is outside of training set range.  Set to $scorerange[0] for classification purposes\n";
	$topscore=$scorerange[0];
    } elsif ($topscore > $scorerange[1]){
	print "Best SPRINGscore is outside of training set range.  Set to $scorerange[1] for classifiction purposes\n";
	$topscore=$scorerange[1];
    }
    my $idnum=0;
    if (defined($ENV{SLURM_JOB_ID}) && $ENV{SLURM_JOB_ID} ne ''){
	$idnum=$ENV{SLURM_JOB_ID};
    }
    print `echo "$pairname,$topscore" >> $outdir/SPRINGres_$idnum.txt`;
}

open(my $resfile,">","$outdir/$pairname/SPRING/res.txt");

if ($topscore==-100.0){
    print $resfile "?\n";
} else {
    print $resfile "$topscore\n";
}
<<<<<<< HEAD


=======
>>>>>>> master
print `sync`;
my $stoptime=time();
print "Total program runtime: ".($stoptime-$starttime)."\n";

#Given two fastas or a fasta and a pdb, calculate the sequence identity
sub getSeqID{
    my $fname1=$_[0];
    my $fname2=$_[1];
    return 0.0 if (! -f $fname1 || ! -f $fname2);
    my $NWresult;
    if ($fname2=~/\.fasta/){
	$NWresult=`$bindir/NWalign $fname1 $fname2`;
    } elsif ($fname2=~/\.pdb/){
	$NWresult=`$bindir/NWalign $fname1 $fname2 2`;
    } else {
	return 0.0;
    }
    $NWresult=~/Identical length:\s+(\d+)/;
    my $idcount=$1;
    $NWresult=~/Length of sequence 1:\s+(\d+).*\nLength of sequence 2:\s+(\d+)/;
    my $seq1len=$1;
    my $seq2len=$2;
    return min($idcount/$seq1len,$idcount/$seq2len) if ($fname2=~/\.fasta/);
    return $idcount/$seq1len if ($fname2=~/\.pdb/);
    return 0.0;
}

#Construct a monomeric model of a query chain given a template structure
sub constructMonomer{
    my $query=$_[0];
    my $template=$_[1];

    my %onetothree=('A'=>"ALA",'C'=>"CYS",'D'=>"ASP",'E'=>"GLU",'F'=>"PHE",
		    'G'=>"GLY",'H'=>"HIS",'I'=>"ILE",'K'=>"LYS",'L'=>"LEU",
		    'M'=>"MET",'N'=>"ASN",'P'=>"PRO",'Q'=>"GLN",'R'=>"ARG",
		    'S'=>"SER",'T'=>"THR",'V'=>"VAL",'W'=>"TRP",'Y'=>"TYR",
		    'B'=>"BBB",'Z'=>"ZZZ",'X'=>"XYZ",'U'=>"SEC",'O'=>"PYL");
    
    my @alignment=();
    my @qaa=();
    open(my $hhresultfile,"<","$tempdir/$query.hhr");
    my $readflag=0;
    while (my $line=<$hhresultfile>){
	if ($line=~/>$template/){
	    while(1){
		for my $i (0..3){
		    $line=<$hhresultfile>;
		    last if ($line=~/Done!/);
		}
		last if (!($line=~/^Q/));
		$line=~/Q .*\s(\d+) (\S+)\s+\d+ \(/;
		my $startq=$1;
		my $qseq=$2;
		for my $i (0..3){
		    $line=<$hhresultfile>;
		}
		$line=~/T .*\s(\d+) (\S+)\s+\d+ \(/;
		my $startt=$1;
		my $tseq=$2;
		while (scalar(@qaa)<$startq){
		    push(@qaa,"XYZ");
		}
		while (scalar(@alignment)<$startt){
		    push(@alignment,-1);
		}
		print "Error: different sequnce lengths\n" if (length($qseq) != length($tseq));
		for my $i (0..length($qseq)-1){
		    my $qchar=substr($qseq,$i,1);
		    my $tchar=substr($tseq,$i,1);
		    if ($qchar eq "-"){
			push(@alignment,-1);
		    } elsif ($tchar eq "-") {
			if ($onetothree{$qchar} ne ""){
			    push(@qaa,$onetothree{$qchar});
			} else {
			    push(@qaa,"UNK");
			}
			$startq++;
		    } else {
			if ($onetothree{$qchar} ne ""){
			    push(@qaa,$onetothree{$qchar});
			} else {
			    push(@qaa,"UNK");
			}
			push(@alignment,$startq);
			$startq++;
		    }
		}
		for my $i (0..1){
		    $line=<$hhresultfile>;
		}
	    }
	    last;
	}
	
    }
    close($hhresultfile);
    
    open(my $modelout,">","$tempdir/$query.pdb");
    open(my $tempin,"<","$dbdir/monomers/$template.pdb");
    my $i=1;
    while (my $line=<$tempin>){
	next if (substr($line,0,4) ne "ATOM" || substr($line,12,4) ne " CA ");
	my $resnum=substr($line,22,4);
	next if ($resnum >= scalar(@alignment) || $alignment[$resnum] < 0);
	my $resname=substr($line,17,3);
	chomp($line);
	substr($line,17,3)=$qaa[$alignment[$resnum]];
	substr($line,6,5)=sprintf("%5s",$resnum);
	substr($line,22,4)=sprintf("%4s",$alignment[$resnum]);
	$line=$line.sprintf("%5s",$resnum).sprintf(" %s",$resname);
	print $modelout "$line\n";
	$i++;
    }
    for my $j (1..$i-1){
	my $connection=sprintf("CONECT%5s%5s\n",$j,$j+1);
    }
    close($modelout);
    close($tempin);
}

#Superpose two pdbs onto dimer framework and score the result
sub constructModel{
    my $prot1=$_[0];
    my $prot2=$_[1];
    my $dimer1temp=$_[2];
    my $dimer2temp=$_[3];
    my $zscore=$_[4];
    my $seq1len=$_[5];
    my $seq2len=$_[6];

    my $dimer1sub=substr($dimer1temp,1,2);
    my $dimer2sub=substr($dimer2temp,1,2);

    (my $dimer1name=$dimer1temp)=~s/\//_/g;
    (my $dimer2name=$dimer2temp)=~s/\//_/g;
    open(my $modelfile,">","$tempdir/$dimer1name-$dimer2name.pdb");
    
    my $TM1result=`$bindir/TMalign "$tempdir/$prot1.pdb" "$dbdir/monomers/$dimer1temp.pdb" -L $seq1len -o $tempdir/out`;
    print `grep "^ATOM.* A .*" $tempdir/out > $tempdir/temp1.pdb`;
    $TM1result=~/TM-score= (.*) \(if scaled/;
    my $tm1score=$1;
    my $end1ind=0;
    open(my $supfile,"<","$tempdir/out_all");
    while (my $line=<$supfile>){
	last if ($line=~/^TER/);
	if ($line=~/^ATOM/){
	    $end1ind=substr($line,6,5);
	    print $modelfile $line;
	}
    }
    print $modelfile "TER\n";
    close($supfile);

    my $TM2result=`$bindir/TMalign "$tempdir/$prot2.pdb" "$dbdir/monomers/$dimer2temp.pdb" -L $seq2len -o $tempdir/out`;
    print `grep "^ATOM.* A .*" $tempdir/out > $tempdir/temp2.pdb`;
    $TM2result=~/TM-score= (.*) \(if scaled/;
    my $tm2score=$1;
    my $end2ind=$end1ind;
    open($supfile,"<","$tempdir/out_all");
    while (my $line=<$supfile>){
	last if ($line=~/^TER/);
	if ($line=~/^ATOM/){
	    substr($line,21,1)="B";
	    $end2ind=$end1ind+substr($line,6,5);
	    substr($line,6,5)=sprintf("%5s",$end2ind);
	    print $modelfile $line;
	}
    }
    print $modelfile "TER\n";
    close($supfile);

    for my $i (1..$end1ind-1){
	my $connectline=sprintf("CONECT%5s%5s\n",$i,$i+1);
	print $modelfile $connectline;
    }
    for my $i ($end1ind+1..$end2ind-1){
	my $connectline=sprintf("CONECT%5s%5s\n",$i,$i+1);
	print $modelfile $connectline;
    }
    close($modelfile);
    my $dfire=`$bindir/dcomplex $tempdir/$dimer1name-$dimer2name.pdb A B`;
    print "$dfire";
    my $tmscore=min($tm1score,$tm2score);
    my $springscore=$weights[0]*$zscore+$weights[1]*$tmscore+$weights[2]*$dfire;
    my @scores=($springscore,$zscore,$tmscore,$dfire);
    return @scores;
}
